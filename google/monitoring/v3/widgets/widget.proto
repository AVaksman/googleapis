// Copyright 2019 Google LLC.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

syntax = "proto3";

package google.monitoring.v3.widgets;

import "google/monitoring/v3/widgets/charting.proto";
import "google/monitoring/v3/widgets/scorecard.proto";

option csharp_namespace = "Google.Cloud.Monitoring.V3.Widgets";
option go_package = "google.golang.org/genproto/googleapis/monitoring/v3/widgets;widgets";
option java_multiple_files = true;
option java_outer_classname = "WidgetProto";
option java_package = "com.google.monitoring.v3.widgets";
option php_namespace = "Google\\Cloud\\Monitoring\\V3\\Widgets";

// A container element in a dashboard that defines a spatial layout or conveys
// information.
message Widget {
  // The optional title of the widget.
  string title = 1;

  // The content displayed by the widget.
  oneof content {
    // Content is arranged with a grid layout.
    GridLayout grid_layout = 2;

    // Content is arranged in a number of columns.
    ColumnLayout column_layout = 3;

    // Content is arranged in a number of rows.
    RowLayout row_layout = 4;

    // Blank space.
    Blank blank = 6;

    // A chart that relays information relative to X and Y axes.
    XYChart xy_chart = 7;

    // A widget that displays text.
    Text text = 16;

    // A widget showing the latest value of a metric, with a small chart
    Scorecard scorecard = 18;
  }
}

// A simplified layout that divides the available space into vertical columns
// of equal width and arranges a set of widgets using a row-first strategy.
message GridLayout {
  // The number of columns in the grid.
  int64 columns = 1;

  // The display elements that are arranged in the grid.
  repeated Widget widgets = 2;
}

// A simplified layout that divides the available space into vertical columns
// and arranges a set of widgets vertically in each column.
message ColumnLayout {
  // Defines the layout properties and content for a column.
  message Column {
    // The relative weight of this column. If omitted, a value of 1 is used.
    int64 weight = 1;

    // The display widgets arranged vertically in this column.
    repeated Widget widgets = 2;
  }

  // The columns of content to display.
  repeated Column columns = 1;
}

// A simplified layout that divides the available space into rows
// and arranges a set of widgets horizontally in each row.
message RowLayout {
  // Defines the layout properties and content for a row.
  message Row {
    // The relative weight of this row. The row weight is used to adjust the
    // height of rows on the screen (relative to peers). If omitted, a value
    // of 1 is used.
    int64 weight = 1;

    // The display widgets arranged horizontally in this row.
    repeated Widget widgets = 2;
  }

  // The rows of content to display.
  repeated Row rows = 1;
}

// A widget that displays textual content.
message Text {
  // The format type of the text content.
  enum Format {
    // The text contains Markdown formatting.
    MARKDOWN = 0;

    // The text contains no special formatting.
    RAW = 1;
  }

  // The text content to be displayed.
  string content = 1;

  // How the text content is formatted.
  Format format = 2;
}

// Blank space.
message Blank {}
