// Copyright 2019 Google LLC.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

syntax = "proto3";

package google.monitoring.v3;

import "google/api/annotations.proto";
import "google/monitoring/v3/dashboard.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/field_mask.proto";

option csharp_namespace = "Google.Cloud.Monitoring.V3";
option go_package = "google.golang.org/genproto/googleapis/monitoring/v3;monitoring";
option java_multiple_files = true;
option java_outer_classname = "DashboardServiceProto";
option java_package = "com.google.monitoring.v3";
option php_namespace = "Google\\Cloud\\Monitoring\\V3";

// Manages Stackdriver dashboards. A dashboard is an arrangement of data display
// widgets in a specific layout. Dashboards come in two varieties;
// *system dashboards* are predefined by Stackdriver, immutable, and available
// to all projects, whereas *custom dashboards* are defined by end users,
// mutable, and scoped to a Workspace.
//
// System and custom dashboards are distinguished by their resource names.
// System dashboards use the form `"dashboards/{dashboard_id}"`
// and custom dashboards use the form
// `"projects/{project_id_or_number}/dashboards/{dashboard_id}"`.
service DashboardService {
  // Creates a new custom dashboard.
  //
  // This method requires the `monitoring.dashboards.create` permission
  // on the specified project. For more information, see
  // [Google Cloud IAM](https://cloud.google.com/iam).
  rpc CreateDashboard(CreateDashboardRequest) returns (Dashboard) {
    option (google.api.http) = {
      post: "/v3/{parent=projects/*}/dashboards"
      body: "dashboard"
    };
  }

  // Lists the existing dashboards.
  //
  // This method requires the `monitoring.dashboards.list` permission
  // on the specified project. For more information, see
  // [Google Cloud IAM](https://cloud.google.com/iam).
  rpc ListDashboards(ListDashboardsRequest) returns (ListDashboardsResponse) {
    option (google.api.http) = {
      get: "/v3/dashboards"
      additional_bindings { get: "/v3/{parent=projects/*}/dashboards" }
    };
  }

  // Fetches a specific dashboard.
  //
  // This method requires the `monitoring.dashboards.get` permission
  // on the specified dashboard. For more information, see
  // [Google Cloud IAM](https://cloud.google.com/iam).
  rpc GetDashboard(GetDashboardRequest) returns (Dashboard) {
    option (google.api.http) = {
      get: "/v3/{name=dashboards/*}"
      additional_bindings { get: "/v3/{name=projects/*/dashboards/*}" }
    };
  }

  // Deletes an existing custom dashboard.
  //
  // This method requires the `monitoring.dashboards.delete` permission
  // on the specified dashboard. For more information, see
  // [Google Cloud IAM](https://cloud.google.com/iam).
  rpc DeleteDashboard(DeleteDashboardRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v3/{name=projects/*/dashboards/*}"
    };
  }

  // Replaces an existing custom dashboard with a new definition.
  //
  // This method requires the `monitoring.dashboards.update` permission
  // on the specified dashboard. For more information, see
  // [Google Cloud IAM](https://cloud.google.com/iam).
  rpc UpdateDashboard(UpdateDashboardRequest) returns (Dashboard) {
    option (google.api.http) = {
      patch: "/v3/{dashboard.name=projects/*/dashboards/*}"
      body: "dashboard"
    };
  }
}

// The `CreateDashboard` request.
message CreateDashboardRequest {
  // The project on which to execute the request. The format is
  // `"projects/{project_id_or_number}"`.
  string parent = 1;

  // The initial dashboard specification.
  Dashboard dashboard = 2;
}

// The `ListDashboards` request.
message ListDashboardsRequest {
  // Dashboard view options.
  enum View {
    // Each returned Dashboard contains the entire definition.
    FULL = 0;

    // Each returned Dashboard contains only identifying information. Layout
    // and content are omitted.
    IDENTITY_ONLY = 1;
  }

  // The scope of the dashboards to list. If empty, only system
  // dashboards will be returned. Otherwise, a project scope must be
  // specified in the form of `"projects/{project_id_or_number}"`. If a project
  // scope is given, the response will include only custom dashboards.
  string parent = 1;

  // The data view to return.
  View view = 2;

  // A positive number that is the maximum number of results to return.
  int32 page_size = 3;

  // If this field is not empty then it must contain the `nextPageToken` value
  // returned by a previous call to this method.  Using this field causes the
  // method to return additional results from the previous method call.
  string page_token = 4;
}

// The `ListDashboards` request.
message ListDashboardsResponse {
  // The list of requested dashboards.
  repeated Dashboard dashboards = 1;

  // If there are more results than have been returned, then this field is set
  // to a non-empty value.  To see the additional results,
  // use that value as `pageToken` in the next call to this method.
  string next_page_token = 2;
}

// The `GetDashboard` request.
message GetDashboardRequest {
  // The resource name of the Dashboard. The format is one of
  // `"dashboards/{dashboard_id}"` (for system dashboards) or
  // `"projects/{project_id_or_number}/dashboards/{dashboard_id}"`
  // (for custom dashboards).
  string name = 1;
}

// The `DeleteDashboard` request.
message DeleteDashboardRequest {
  // The resource name of the Dashboard. The format is
  // `"projects/{project_id_or_number}/dashboards/{dashboard_id}"`.
  string name = 1;
}

// The `UpdateDashboard` request.
message UpdateDashboardRequest {
  // The dashboard that will replace the existing dashboard.
  Dashboard dashboard = 2;

  // Optional. A list of dashboard field names. If this field is not empty,
  // each listed field in the existing dashboard is set to the value of the
  // corresponding field in the supplied dashboard (`dashboard`), or to the
  // field's default value if the field is not in the supplied dashboard. Fields
  // not listed retain their previous value.
  //
  // If this field is empty, then the supplied dashboard replaces the existing
  // dashboard.
  //
  // The only dashboard field that is exempt from these rules is `revision`.
  // Whether this update is partial or a complete replacement, the `revision`
  // field in must contain the most recent revision number of the dashboard.
  // This value will be validated, automatically incremented, and returned in
  // the response dashboard.
  google.protobuf.FieldMask update_mask = 3;
}
