// Copyright 2019 Google LLC.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

syntax = "proto3";

package google.cloud.knowledge.v1alpha2;

import "google/api/annotations.proto";
import "google/longrunning/operations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";
import "google/rpc/status.proto";

option cc_enable_arenas = true;
option go_package = "google.golang.org/genproto/googleapis/cloud/knowledge/v1alpha2;knowledge";
option java_multiple_files = true;
option java_outer_classname = "DocumentProto";
option java_package = "com.google.cloud.knowledge.v1alpha2";


service Documents {
  // Creates a document. The result is an Operation which can be used to track
  // the creation process.
  // Operation <response: [Document][google.cloud.knowledge.v1alpha2.Document],
  //            metadata: [OperationMetadata][google.cloud.knowledge.v1alpha2.OperationMetadata]>
  rpc CreateDocument(CreateDocumentRequest) returns (google.longrunning.Operation) {
    option (google.api.http) = {
      post: "/v1alpha2/{parent=projects/*/locations/*/knowledgeBases/*}/documents"
      body: "document"
    };
  }

  // Updates the specified document.
  // Operation <response: [Document][google.cloud.knowledge.v1alpha2.Document],
  //            metadata: [OperationMetadata][google.cloud.knowledge.v1alpha2.OperationMetadata]>
  rpc UpdateDocument(UpdateDocumentRequest) returns (google.longrunning.Operation) {
    option (google.api.http) = {
      patch: "/v1alpha2/{document.name=projects/*/locations/*/knowledgeBases/*/documents/*}"
      body: "document"
    };
  }

  // Reloads the specified document from its specified source, content_uri or
  // content. The previously loaded content of the document will be deleted.
  // Note: Even when the content of the document has not changed, there still
  // may be side effects because of internal implementation changes.
  // Operation <response: [Document][google.cloud.knowledge.v1alpha2.Document],
  //            metadata: [OperationMetadata][google.cloud.knowledge.v1alpha2.OperationMetadata]>
  rpc ReloadDocument(ReloadDocumentRequest) returns (google.longrunning.Operation) {
    option (google.api.http) = {
      post: "/v1alpha2/{name=projects/*/locations/*/knowledgeBases/*/documents/*}:reload"
      body: "*"
    };
  }

  // Gets a document. Returns NOT_FOUND if the document does not exist.
  rpc GetDocument(GetDocumentRequest) returns (Document) {
    option (google.api.http) = {
      get: "/v1alpha2/{name=projects/*/locations/*/knowledgeBases/*/documents/*}"
    };
  }

  // Lists documents in a knowledge base. The order is unspecified but
  // deterministic. Newly created documents will not necessarily be added to the
  // end of this list. Returns NOT_FOUND if the knowledge base does not exist.
  rpc ListDocuments(ListDocumentsRequest) returns (ListDocumentsResponse) {
    option (google.api.http) = {
      get: "/v1alpha2/{parent=projects/*/locations/*/knowledgeBases/*}/documents"
    };
  }

  // Deletes a document. The result is an Operation which can be used to track
  // the deletion process.
  //
  // Operation <response: [google.protobuf.Empty][google.protobuf.Empty],
  //            metadata: [OperationMetadata][google.cloud.knowledge.v1alpha2.OperationMetadata]>
  rpc DeleteDocument(DeleteDocumentRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1alpha2/{name=projects/*/locations/*/knowledgeBases/*/documents/*}"
    };
  }
}

// A document resource.
message Document {
  message ReloadStatus {
    // Output only. The time of a reload attempt.
    // This reload may have been triggered automatically or manually and may
    // not have succeeded.
    google.protobuf.Timestamp time = 1;

    // Output only. The status of a reload attempt or the initial load.
    google.rpc.Status status = 2;
  }

  // An enum indicates the knowledge type of a document content.
  enum KnowledgeType {
    // The type is unspecified or arbitrary.
    KNOWLEDGE_TYPE_UNSPECIFIED = 0;

    // The document content contains question and answer pairs as either HTML or
    // CSV. Typical FAQ HTML formats are parsed accurately, but unusual formats
    // may fail to be parsed.
    //
    // CSV must have questions in the first column and answers in the second,
    // with no header. Because of this explicit format, they are always parsed
    // accurately.
    FAQ = 1;

    // Documents for which unstructured text is extracted and used for
    // question answering.
    EXTRACTIVE_QA = 2;

    // Documents for which unstructured text is extracted and used to match
    // queries that are semantically similar.
    SEMANTIC_MATCH = 4;
  }

  // The document resource name, which has the format of
  // "projects/{project_id}/locations/{location_id}/knowledgeBases/{knowledge_base_id}/documents/{document_id}".
  // The name must be empty when creating a document.
  string name = 1;

  // The display name of the document. The name must be 1024 characters or less;
  // otherwise, the creation request will fail.
  string display_name = 2;

  // Required. The MIME type of the document.
  string mime_type = 3;

  // The knowledge type of the document content.
  repeated KnowledgeType knowledge_types = 4;

  // The source of the document.
  oneof source {
    // The URI where the file content is located.
    //
    // For documents stored in Google Cloud Storage, these URIs must have
    // the form `gs://<bucket-name>/<object-name>`.
    //
    // NOTE: External URLs must correspond to public webpages, i.e., they must
    // be indexed by Google Search. In particular, URLs for showing documents in
    // Google Cloud Storage (i.e. the URL in your browser) are not supported.
    // Instead use the `gs://` format URI described above.
    string content_uri = 5;

    // The raw content in bytes of the document.
    bytes raw_content = 6;
  }

  // Optional metadata for the document. The metadata supports arbitrary
  // key-value pairs. Suggested use cases include storing a document's title,
  // an external URL distinct from the document's content_uri, etc.
  // The metadata is also populated in the [Answer.metadata][google.cloud.knowledge.v1alpha2.Answer.metadata] field returned
  // from the call to `QueryKnowledgeBase` method.
  // The max size of a `key` or a `value` of the metadata is 1024 bytes.
  map<string, string> metadata = 7;

  // Optional. If true, we try to automatically reload the document every day
  // (at a time picked by the system). If false or unspecified, we don't try
  // to automatically reload the document.
  //
  // Currently you can only enable automatic reload for documents sourced from
  // a public url, see `source` field for the source types.
  //
  // Reload status can be tracked in `latest_reload_status`. If a reload
  // fails, we will keep the document unchanged.
  //
  // If a reload fails with internal errors, the system will try to reload the
  // document on the next day.
  // If a reload fails with non-retriable errors (e.g. PERMISION_DENIED), the
  // system will not try to reload the document anymore. You need to manually
  // reload the document successfully by calling `ReloadDocument` and clear the
  // errors.
  bool enable_auto_reload = 9;

  // Output only. The time and status of the latest reload.
  // This reload may have been triggered automatically or manually
  // and may not have succeeded.
  ReloadStatus latest_reload_status = 10;
}

// Request message for [KnowledgeService.CreateDocument][].
message CreateDocumentRequest {
  // The name of the parent knowledge base in which the document is created.
  string parent = 1;

  // The document to create.
  Document document = 2;
}

// Request message for [KnowledgeService.UpdateDocument][].
message UpdateDocumentRequest {
  // Required. The document to update.
  Document document = 1;

  // Optional. The mask to control which fields get updated.
  google.protobuf.FieldMask update_mask = 2;
}

// Request message for [KnowledgeService.GetDocument][].
message GetDocumentRequest {
  // The name of the document to retrieve.
  string name = 1;
}

// Request message for [KnowledgeService.ListDocuments][].
message ListDocumentsRequest {
  // The name of the parent knowledge base whose documents we'd like to list.
  string parent = 1;

  // Requested page size. Server may return fewer documents than requested.
  // If unspecified, server will pick an appropriate default. The
  // default page size is 10 and max page size can be specified is 100.
  int32 page_size = 2;

  // A token identifying a page of results the server should return.
  // Typically, this is the value of
  // [ListDocumentsResponse.next_page_token][google.cloud.knowledge.v1alpha1.ListKnowledgeBasesResponse.next_page_token]
  // returned from the previous call to `ListDocuments` method.
  string page_token = 3;
}

// Response message for [KnowledgeService.ListDocuments][].
message ListDocumentsResponse {
  // The list of documents.
  repeated Document documents = 1;

  // A token to retrieve next page of results.
  // Pass this value in the
  // [ListDocumentsRequest.page_token][google.cloud.knowledge.v1alpha1.ListDocumentsRequest.page_token]
  // field in the subsequent call to `ListDocuments` method to retrieve the next
  // page of results.
  string next_page_token = 2;
}

// Request message for [KnowledgeService.DeleteDocument][].
message DeleteDocumentRequest {
  // The name of the document to delete.
  string name = 1;
}

// Request message for [KnowledgeService.ReloadDocument][].
message ReloadDocumentRequest {
  // The name of the document to reload.
  // Format: `projects/<Project ID>/knowledgeBases/<Knowledge Base
  // ID>/documents/<Document ID>`
  string name = 1;
}
