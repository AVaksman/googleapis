// Copyright 2019 Google LLC.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

syntax = "proto3";

package google.cloud.secrets.v1alpha;

import "google/api/annotations.proto";
import "google/cloud/secrets/v1alpha/resources.proto";
import "google/iam/v1/iam_policy.proto";
import "google/iam/v1/policy.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/field_mask.proto";

option csharp_namespace = "Google.Cloud.Secrets.V1Alpha";
option go_package = "google.golang.org/genproto/googleapis/cloud/secrets/v1alpha;secrets";
option java_multiple_files = true;
option java_outer_classname = "SecretsProto";
option java_package = "com.google.cloud.secrets.v1alpha";
option objc_class_prefix = "GSM";
option php_namespace = "Google\\Cloud\\Secrets\\V1alpha";

// Google Cloud Secret Manager Service
//
// Manages secrets and operations using those secrets. Implements a REST
// model with the following objects:
//
// * [Secret][google.cloud.secrets.v1alpha.Secret]
// * [SecretVersion][google.cloud.secrets.v1alpha.SecretVersion]
service SecretManagerService {
  // Lists [Secrets][google.cloud.secrets.v1alpha.Secret].
  rpc ListSecrets(ListSecretsRequest) returns (ListSecretsResponse) {
    option (google.api.http) = {
      get: "/v1alpha/{parent=projects/*}/secrets"
    };
  }

  // Creates a new [Secret][google.cloud.secrets.v1alpha.Secret] containing no [SecretVersions][google.cloud.secrets.v1alpha.SecretVersion].
  rpc CreateSecret(CreateSecretRequest) returns (Secret) {
    option (google.api.http) = {
      post: "/v1alpha/{parent=projects/*}/secrets"
      body: "secret"
    };
  }

  // Creates a new [SecretVersion][google.cloud.secrets.v1alpha.SecretVersion] containing secret data and associates
  // it with an existing [Secret][google.cloud.secrets.v1alpha.Secret].
  rpc SetSecretPayload(SetSecretPayloadRequest) returns (SecretVersion) {
    option (google.api.http) = {
      post: "/v1alpha/{parent=projects/*/secrets/*}:setPayload"
      body: "*"
    };
  }

  // Returns metadata for a given [Secret][google.cloud.secrets.v1alpha.Secret].
  rpc GetSecret(GetSecretRequest) returns (Secret) {
    option (google.api.http) = {
      get: "/v1alpha/{name=projects/*/secrets/*}"
    };
  }

  // Lists [SecretVersions][google.cloud.secrets.v1alpha.SecretVersion]. This does not return secret data.
  rpc ListSecretVersions(ListSecretVersionsRequest) returns (ListSecretVersionsResponse) {
    option (google.api.http) = {
      get: "/v1alpha/{parent=projects/*/secrets/*}/versions"
    };
  }

  // Returns metadata for a given [SecretVersion][google.cloud.secrets.v1alpha.SecretVersion].
  rpc GetSecretVersion(GetSecretVersionRequest) returns (SecretVersion) {
    option (google.api.http) = {
      get: "/v1alpha/{name=projects/*/secrets/*/versions/*}"
    };
  }

  // Returns the metadata of the latest [SecretVersion][google.cloud.secrets.v1alpha.SecretVersion] for a given
  // [Secret][google.cloud.secrets.v1alpha.Secret].
  rpc GetLatestSecretVersion(GetLatestSecretVersionRequest) returns (SecretVersion) {
    option (google.api.http) = {
      get: "/v1alpha/{name=projects/*/secrets/*}/latest"
    };
  }

  // Updates metadata of an existing [Secret][google.cloud.secrets.v1alpha.Secret].
  rpc UpdateSecret(UpdateSecretRequest) returns (Secret) {
    option (google.api.http) = {
      patch: "/v1alpha/{secret.name=projects/*/secrets/*}"
      body: "secret"
    };
  }

  // Updates metadata of an existing [SecretVersion][google.cloud.secrets.v1alpha.SecretVersion].
  //
  // [state][google.cloud.secrets.v1alpha.SecretVersion.state] may be changed between
  // [ENABLED][google.cloud.secrets.v1alpha.SecretVersion.State.ENABLED] and
  // [DISABLED][google.cloud.secrets.v1alpha.SecretVersion.State.DISABLED].
  rpc UpdateSecretVersion(UpdateSecretVersionRequest) returns (SecretVersion) {
    option (google.api.http) = {
      patch: "/v1alpha/{secret_version.name=projects/*/secrets/*/versions/*}"
      body: "secret_version"
    };
  }

  // Accesses an existing [SecretVersion][google.cloud.secrets.v1alpha.SecretVersion]. This call returns the secret data.
  rpc AccessSecretVersion(AccessSecretVersionRequest) returns (AccessSecretVersionResponse) {
    option (google.api.http) = {
      get: "/v1alpha/{name=projects/*/secrets/*/versions/*}:access"
    };
  }

  // Accesses the latest [SecretVersion][google.cloud.secrets.v1alpha.SecretVersion] for a given [Secret][google.cloud.secrets.v1alpha.Secret]. This call
  // returns secret data.
  rpc AccessLatestSecret(AccessLatestSecretRequest) returns (AccessLatestSecretResponse) {
    option (google.api.http) = {
      get: "/v1alpha/{name=projects/*/secrets/*}/latest:access"
    };
  }

  // Deletes a [Secret][google.cloud.secrets.v1alpha.Secret]. This call will fail if the [Secret][google.cloud.secrets.v1alpha.Secret] contains
  // one or more [SecretVersions][google.cloud.secrets.v1alpha.SecretVersion] in a state that is not
  // [DESTROYED][google.cloud.secrets.v1alpha.SecretVersion.State.DESTROYED].
  rpc DeleteSecret(DeleteSecretRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1alpha/{name=projects/*/secrets/*}"
    };
  }

  // Destroys a [SecretVersion][google.cloud.secrets.v1alpha.SecretVersion].
  //
  // Upon calling this method, [state][google.cloud.secrets.v1alpha.SecretVersion.state] will be set to
  // [DESTROYED][google.cloud.secrets.v1alpha.SecretVersion.State.DESTROYED],
  // and the secret data will be irrevocably destroyed.
  rpc DestroySecretVersion(DestroySecretVersionRequest) returns (SecretVersion) {
    option (google.api.http) = {
      post: "/v1alpha/{name=projects/*/secrets/*/versions/*}:destroy"
      body: "*"
    };
  }

  // Sets the access control policy on the specified secret. Replaces any
  // existing policy.
  //
  // Permissions on [SecretVersions][google.cloud.secrets.v1alpha.SecretVersion] are enforced according
  // to the policy set on the associated [Secret][google.cloud.secrets.v1alpha.Secret].
  rpc SetIamPolicy(google.iam.v1.SetIamPolicyRequest) returns (google.iam.v1.Policy) {
    option (google.api.http) = {
      post: "/v1alpha/{resource=projects/*/secrets/*}:setIamPolicy"
      body: "*"
    };
  }

  // Gets the access control policy for a secret.
  // Returns empty policy if the secret exists and does not have a policy set.
  rpc GetIamPolicy(google.iam.v1.GetIamPolicyRequest) returns (google.iam.v1.Policy) {
    option (google.api.http) = {
      get: "/v1alpha/{resource=projects/*/secrets/*}:getIamPolicy"
    };
  }

  // Returns permissions that a caller has on the specified secret.
  // If the secret does not exist, this will return an empty set of
  // permissions, not a NOT_FOUND error.
  //
  // Note: This operation is designed to be used for building permission-aware
  // UIs and command-line tools, not for authorization checking. This operation
  // may "fail open" without warning.
  rpc TestIamPermissions(google.iam.v1.TestIamPermissionsRequest) returns (google.iam.v1.TestIamPermissionsResponse) {
    option (google.api.http) = {
      post: "/v1alpha/{resource=projects/*/secrets/*}:testIamPermissions"
      body: "*"
    };
  }
}

// Request message for [SecretManagerService.ListSecrets][google.cloud.secrets.v1alpha.SecretManagerService.ListSecrets].
message ListSecretsRequest {
  // Required. The resource name of the project associated with the
  // [Secrets][google.cloud.secrets.v1alpha.Secret], in the format `projects/*`.
  string parent = 1;

  // The maximum number of results to be returned in a single page. If
  // set to 0, the server will decide the number of results to return.
  int32 page_size = 2;

  // Optional pagination token, returned earlier via
  // [ListSecretsResponse.next_page_token][google.cloud.secrets.v1alpha.ListSecretsResponse.next_page_token].
  string page_token = 3;
}

// Response message for [SecretManagerService.ListSecrets][google.cloud.secrets.v1alpha.SecretManagerService.ListSecrets].
message ListSecretsResponse {
  // The list of [Secrets][google.cloud.secrets.v1alpha.Secret].
  repeated Secret secrets = 1;

  // A token to retrieve the next page of results. Pass this value in
  // [ListSecretsRequest.page_token][google.cloud.secrets.v1alpha.ListSecretsRequest.page_token] to retrieve the next page.
  string next_page_token = 2;

  // The total number of [Secrets][google.cloud.secrets.v1alpha.Secret].
  int32 total_size = 3;
}

// Request message for [SecretManagerService.CreateSecret][google.cloud.secrets.v1alpha.SecretManagerService.CreateSecret].
message CreateSecretRequest {
  // Required. The resource name of the project to associate with the
  // [Secret][google.cloud.secrets.v1alpha.Secret], in the format `projects/*`.
  string parent = 1;

  // Required. This must be unique within the project.
  string secret_id = 2;

  // A [Secret][google.cloud.secrets.v1alpha.Secret] with initial field values.
  Secret secret = 3;
}

// Request message for [SecretManagerService.SetSecretPayload][google.cloud.secrets.v1alpha.SecretManagerService.SetSecretPayload].
message SetSecretPayloadRequest {
  // Required. The resource name of the [Secret][google.cloud.secrets.v1alpha.Secret] to associate with the
  // [SecretVersion][google.cloud.secrets.v1alpha.SecretVersion] in the format `projects/*/secrets/*`.
  string parent = 1;

  // Required. The secret payload of the [SecretVersion][google.cloud.secrets.v1alpha.SecretVersion].
  SecretPayload payload = 2;
}

// Request message for [SecretManagerService.GetSecret][google.cloud.secrets.v1alpha.SecretManagerService.GetSecret].
message GetSecretRequest {
  // Required. The resource name of the [Secret][google.cloud.secrets.v1alpha.Secret], in the
  // format `projects/*/secrets/*`.
  string name = 1;
}

// Request message for [SecretManagerService.ListSecretVersions][google.cloud.secrets.v1alpha.SecretManagerService.ListSecretVersions].
message ListSecretVersionsRequest {
  // Required. The resource name of the [Secret][google.cloud.secrets.v1alpha.Secret] associated with the
  // [SecretVersions][google.cloud.secrets.v1alpha.SecretVersion] to list, in the format
  // `projects/*/secrets/*`.
  string parent = 1;

  // The maximum number of results to be returned in a single page. If
  // set to 0, the server will decide the number of results to return.
  int32 page_size = 2;

  // Optional pagination token, returned earlier via
  // [ListSecretVersionsResponse.next_page_token][google.cloud.secrets.v1alpha.ListSecretVersionsResponse.next_page_token].
  string page_token = 3;
}

// Response message for [SecretManagerService.ListSecretVersions][google.cloud.secrets.v1alpha.SecretManagerService.ListSecretVersions].
message ListSecretVersionsResponse {
  // The list of [SecretVersions][google.cloud.secrets.v1alpha.SecretVersion].
  repeated SecretVersion versions = 1;

  // A token to retrieve the next page of results. Pass this value in
  // [ListSecretVersionsRequest.page_token][google.cloud.secrets.v1alpha.ListSecretVersionsRequest.page_token] to retrieve the next page.
  string next_page_token = 2;

  // The total number of [SecretVersions][google.cloud.secrets.v1alpha.SecretVersion].
  int32 total_size = 3;
}

// Request message for [SecretManagerService.GetSecretVersion][google.cloud.secrets.v1alpha.SecretManagerService.GetSecretVersion].
message GetSecretVersionRequest {
  // Required. The resource name of the [SecretVersion][google.cloud.secrets.v1alpha.SecretVersion] in the format
  // `projects/*/secrets/*/secretVersions/*`.
  string name = 1;
}

// Request message for [SecretManagerService.GetLatestSecretVersion][google.cloud.secrets.v1alpha.SecretManagerService.GetLatestSecretVersion].
message GetLatestSecretVersionRequest {
  // Required. The resource name of the [Secret][google.cloud.secrets.v1alpha.Secret] in the format
  // `projects/*/secrets/*`.
  string name = 1;
}

// Request message for [SecretManagerService.UpdateSecret][google.cloud.secrets.v1alpha.SecretManagerService.UpdateSecret].
message UpdateSecretRequest {
  // Required. [Secret][google.cloud.secrets.v1alpha.Secret] with updated field values.
  Secret secret = 1;

  // Required. Specifies the fields to be updated.
  google.protobuf.FieldMask update_mask = 2;
}

// Request message for [SecretManagerService.UpdateSecretVersion][google.cloud.secrets.v1alpha.SecretManagerService.UpdateSecretVersion].
message UpdateSecretVersionRequest {
  // Required. [SecretVersion][google.cloud.secrets.v1alpha.SecretVersion] with updated field values.
  SecretVersion secret_version = 1;

  // Required. Specifies the fields to be updated.
  google.protobuf.FieldMask update_mask = 2;
}

// Request message for [SecretManagerService.AccessSecretVersion][google.cloud.secrets.v1alpha.SecretManagerService.AccessSecretVersion].
message AccessSecretVersionRequest {
  // Required. The resource name of the [SecretVersion][google.cloud.secrets.v1alpha.SecretVersion] in the format
  // `projects/*/secrets/*/secretVersions/*`.
  string name = 1;
}

// Response message for [SecretManagerService.AccessSecretVersion][google.cloud.secrets.v1alpha.SecretManagerService.AccessSecretVersion].
message AccessSecretVersionResponse {
  // Secret payload
  SecretPayload payload = 1;
}

// Request message for [SecretManagerService.AccessLatestSecret][google.cloud.secrets.v1alpha.SecretManagerService.AccessLatestSecret].
message AccessLatestSecretRequest {
  // Required. The resource name of the [Secret][google.cloud.secrets.v1alpha.Secret] in the format
  // `projects/*/secrets/*`.
  string name = 1;
}

// Response message for [SecretManagerService.AccessSecret][].
message AccessLatestSecretResponse {
  // Secret payload
  SecretPayload payload = 1;

  // The [SecretVersion][google.cloud.secrets.v1alpha.SecretVersion] accessed.
  SecretVersion version = 2;
}

// Request message for [SecretManagerService.DeleteSecret][google.cloud.secrets.v1alpha.SecretManagerService.DeleteSecret].
message DeleteSecretRequest {
  // Required. The resource name of the [Secret][google.cloud.secrets.v1alpha.Secret] to delete in the format
  // `projects/*/secrets/*`.
  string name = 1;
}

// Request message for [SecretManagerService.DestroySecretVersion][google.cloud.secrets.v1alpha.SecretManagerService.DestroySecretVersion].
message DestroySecretVersionRequest {
  // Required. The resource name of the [SecretVersion][google.cloud.secrets.v1alpha.SecretVersion] to destroy
  // in the format `projects/*/secrets/*/secretVersions/*`.
  string name = 1;
}
