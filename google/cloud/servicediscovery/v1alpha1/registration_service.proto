// Copyright 2018 Google LLC.  Google Confidential and Proprietary.
//
// Non-exclusively licensed under the terms of Google's Trusted Tester Agreement
// and other applicable Google Cloud Platform agreements with you.
// Google retains title, ownership and all rights to all copyrights and
// other intellectual property.
//

syntax = "proto3";

package google.cloud.servicediscovery.v1alpha1;

import "google/api/annotations.proto";
import "google/cloud/servicediscovery/v1alpha1/service.proto";
import "google/cloud/servicediscovery/v1alpha1/service_endpoint.proto";
import "google/cloud/servicediscovery/v1alpha1/service_registry.proto";
import "google/iam/v1/iam_policy.proto";
import "google/iam/v1/policy.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/field_mask.proto";

option cc_enable_arenas = true;
option go_package = "google.golang.org/genproto/googleapis/cloud/servicediscovery/v1alpha1;servicediscovery";
option java_multiple_files = true;
option java_outer_classname = "RegistrationServiceProto";
option java_package = "com.google.cloud.servicediscovery.v1alpha1";


// Service Discovery API for registering services. It defines the following
// resource model:
//
// - The API has a collection of
// [ServiceRegistry][google.cloud.servicediscovery.v1alpha1.ServiceRegistry]
// resources, named `projects/*/locations/*/registries/*`.
//
// - Each ServiceRegistry has a collection of
// [Service][google.cloud.servicediscovery.v1alpha1.Service] resources, named
// `projects/*/locations/*/registries/*/services/*`.
//
// - Each Service has a collection of
// [ServiceEndpoint][google.cloud.servicediscovery.v1alpha1.ServiceEndpoint]
// resources, named
// `projects/*/locations/*/registries/*/services/*/endpoints/*`.
service RegistrationService {
  // Creates a service registry, and returns the new ServiceRegistry.
  rpc CreateServiceRegistry(CreateServiceRegistryRequest) returns (ServiceRegistry) {
    option (google.api.http) = {
      post: "/v1alpha1/{parent=projects/*/locations/*}/registries"
      body: "service_registry"
    };
  }

  // Lists all service registries.
  rpc ListServiceRegistries(ListServiceRegistriesRequest) returns (ListServiceRegistriesResponse) {
    option (google.api.http) = {
      get: "/v1alpha1/{parent=projects/*/locations/*}/registries"
    };
  }

  // Gets a service registry.
  rpc GetServiceRegistry(GetServiceRegistryRequest) returns (ServiceRegistry) {
    option (google.api.http) = {
      get: "/v1alpha1/{name=projects/*/locations/*/registries/*}"
    };
  }

  // Deletes a service registry. This also deletes all services and endpoints in
  // the registry.
  rpc DeleteServiceRegistry(DeleteServiceRegistryRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1alpha1/{name=projects/*/locations/*/registries/*}"
    };
  }

  // Creates a service, and returns the new Service.
  rpc CreateService(CreateServiceRequest) returns (Service) {
    option (google.api.http) = {
      post: "/v1alpha1/{parent=projects/*/locations/*/registries/*}/services"
      body: "service"
    };
  }

  // Lists all services belonging to a registry.
  rpc ListServices(ListServicesRequest) returns (ListServicesResponse) {
    option (google.api.http) = {
      get: "/v1alpha1/{parent=projects/*/locations/*/registries/*}/services"
    };
  }

  // Gets a service.
  rpc GetService(GetServiceRequest) returns (Service) {
    option (google.api.http) = {
      get: "/v1alpha1/{name=projects/*/locations/*/registries/*/services/*}"
    };
  }

  // Updates a service.
  rpc UpdateService(UpdateServiceRequest) returns (Service) {
    option (google.api.http) = {
      patch: "/v1alpha1/{name=projects/*/locations/*/registries/*/services/*}"
      body: "service"
    };
  }

  // Deletes a service. This also deletes all service endpoints associated with
  // the service.
  rpc DeleteService(DeleteServiceRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1alpha1/{name=projects/*/locations/*/registries/*/services/*}"
    };
  }

  // Sets the metadata and endpoints for a service, which will completely
  // replace its original metadata and endpoints.
  rpc SetService(SetServiceRequest) returns (SetServiceResponse) {
    option (google.api.http) = {
      post: "/v1alpha1/{name=projects/*/locations/*/registries/*/services/*}:setservice"
      body: "*"
    };
  }

  // Updates keys in a service's metadata. Only the provided keys are
  // added/updated (PATCH semantics).
  rpc UpdateServiceMetadata(UpdateServiceMetadataRequest) returns (Service) {
    option (google.api.http) = {
      post: "/v1alpha1/{name=projects/*/locations/*/registries/*/services/*}:updatemetadata"
      body: "metadata"
    };
  }

  // Removes keys in a service's metadata.
  rpc RemoveServiceMetadata(RemoveServiceMetadataRequest) returns (Service) {
    option (google.api.http) = {
      post: "/v1alpha1/{name=projects/*/locations/*/registries/*/services/*}:deletemetadata"
      body: "keys"
    };
  }

  // Creates a service endpoint, and returns the new ServiceEndpoint.
  rpc CreateServiceEndpoint(CreateServiceEndpointRequest) returns (ServiceEndpoint) {
    option (google.api.http) = {
      post: "/v1alpha1/{parent=projects/*/locations/*/registries/*/services/*}/endpoints"
      body: "service_endpoint"
    };
  }

  // Lists all service endpoints.
  rpc ListServiceEndpoints(ListServiceEndpointsRequest) returns (ListServiceEndpointsResponse) {
    option (google.api.http) = {
      get: "/v1alpha1/{parent=projects/*/locations/*/registries/*/services/*}/endpoints"
    };
  }

  // Gets a service endpoint.
  rpc GetServiceEndpoint(GetServiceEndpointRequest) returns (ServiceEndpoint) {
    option (google.api.http) = {
      get: "/v1alpha1/{name=projects/*/locations/*/registries/*/services/*/endpoints/*}"
    };
  }

  // Updates a service endpoint.
  rpc UpdateServiceEndpoint(UpdateServiceEndpointRequest) returns (ServiceEndpoint) {
    option (google.api.http) = {
      patch: "/v1alpha1/{name=projects/*/locations/*/registries/*/services/*/endpoints/*}"
      body: "service_endpoint"
    };
  }

  // Deletes a service endpoint.
  rpc DeleteServiceEndpoint(DeleteServiceEndpointRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1alpha1/{name=projects/*/locations/*/registries/*/services/*/endpoints/*}"
    };
  }

  // Updates keys in a service endpoint's metadata. Only the provided keys are
  // added/updated (PATCH semantics).
  rpc UpdateServiceEndpointMetadata(UpdateServiceEndpointMetadataRequest) returns (ServiceEndpoint) {
    option (google.api.http) = {
      post: "/v1alpha1/{name=projects/*/locations/*/registries/*/services/*/endpoints/*}:updatemetadata"
      body: "metadata"
    };
  }

  // Removes keys in the service endpoint's metadata.
  rpc RemoveServiceEndpointMetadata(RemoveServiceEndpointMetadataRequest) returns (ServiceEndpoint) {
    option (google.api.http) = {
      post: "/v1alpha1/{name=projects/*/locations/*/registries/*/services/*/endpoints/*}:deletemetadata"
      body: "keys"
    };
  }

  // Gets the IAM Policy for a resource (registry or service only).
  rpc GetIamPolicy(google.iam.v1.GetIamPolicyRequest) returns (google.iam.v1.Policy) {
    option (google.api.http) = {
      post: "/v1alpha1/{resource=projects/*/locations/*/registries/*}:getIamPolicy"
      body: "*"
      additional_bindings {
        post: "/v1alpha1/{resource=projects/*/locations/*/registries/*/services/*}:getIamPolicy"
        body: "*"
      }
    };
  }

  // Sets the IAM Policy for a resource (registry or service only).
  rpc SetIamPolicy(google.iam.v1.SetIamPolicyRequest) returns (google.iam.v1.Policy) {
    option (google.api.http) = {
      post: "/v1alpha1/{resource=projects/*/locations/*/registries/*}:setIamPolicy"
      body: "*"
      additional_bindings {
        post: "/v1alpha1/{resource=projects/*/locations/*/registries/*/services/*}:setIamPolicy"
        body: "*"
      }
    };
  }

  // Tests IAM permissions for a resource (registry or service only).
  rpc TestIamPermissions(google.iam.v1.TestIamPermissionsRequest) returns (google.iam.v1.TestIamPermissionsResponse) {
    option (google.api.http) = {
      post: "/v1alpha1/{resource=projects/*/locations/*/registries/*}:testIamPermissions"
      body: "*"
      additional_bindings {
        post: "/v1alpha1/{resource=projects/*/locations/*/registries/*/services/*}:testIamPermissions"
        body: "*"
      }
    };
  }
}

// The request message for [RegistrationService.CreateServiceRegistry][google.cloud.servicediscovery.v1alpha1.RegistrationService.CreateServiceRegistry].
message CreateServiceRegistryRequest {
  // Required. The resource name of the project and location the service
  // registry will be created in.
  string parent = 1;

  // Required. It must be unique within a location and match the regular
  // expression `[a-zA-Z][a-zA-Z0-9_-]{0,62}`
  string service_registry_id = 2;

  // Required. A service registry with initial fields set.
  ServiceRegistry service_registry = 3;
}

// The request message for [RegistrationService.ListServiceRegistries][google.cloud.servicediscovery.v1alpha1.RegistrationService.ListServiceRegistries].
message ListServiceRegistriesRequest {
  // Required. The resource name of the project and location whose service
  // registries we'd like to list.
  string parent = 1;

  // Optional. The maximum number of items to return.
  int32 page_size = 2;

  // Optional. The next_page_token value returned from a previous List request,
  // if any.
  string page_token = 3;
}

// The response message for [RegistrationService.ListServiceRegistries][google.cloud.servicediscovery.v1alpha1.RegistrationService.ListServiceRegistries].
message ListServiceRegistriesResponse {
  // The list of service registries.
  repeated ServiceRegistry service_registries = 1;

  // Token to retrieve the next page of results, or empty if there are no
  // more results in the list.
  string next_page_token = 2;
}

// The request message for [RegistrationService.GetServiceRegistry][google.cloud.servicediscovery.v1alpha1.RegistrationService.GetServiceRegistry].
message GetServiceRegistryRequest {
  // Required. The name of the service registry to retrieve.
  string name = 1;
}

// The request message for [RegistrationService.DeleteServiceRegistry][google.cloud.servicediscovery.v1alpha1.RegistrationService.DeleteServiceRegistry].
message DeleteServiceRegistryRequest {
  // Required. The name of the service registry to delete.
  string name = 1;
}

// The request message for [RegistrationService.CreateService][google.cloud.servicediscovery.v1alpha1.RegistrationService.CreateService].
message CreateServiceRequest {
  // Required. The resource name of the registry this service will belong to.
  string parent = 1;

  // Required. The name of the service. Must be unique within a registry and
  // match regular expression `[a-zA-Z][a-zA-Z0-9_-]{0,62}`
  string service_name = 2;

  // Required. A service  with initial fields set.
  Service service = 3;
}

// The request message for [RegistrationService.ListServices][google.cloud.servicediscovery.v1alpha1.RegistrationService.ListServices].
message ListServicesRequest {
  // Required. The resource name of the service registry whose services we'd
  // like to list.
  string parent = 1;

  // Optional. The maximum number of items to return.
  int32 page_size = 2;

  // Optional. The next_page_token value returned from a previous List request,
  // if any.
  string page_token = 3;
}

// The response message for [RegistrationService.ListServices][google.cloud.servicediscovery.v1alpha1.RegistrationService.ListServices].
message ListServicesResponse {
  // The list of services.
  repeated Service services = 1;

  // Token to retrieve the next page of results, or empty if there are no
  // more results in the list.
  string next_page_token = 2;
}

// The request message for [RegistrationService.GetService][google.cloud.servicediscovery.v1alpha1.RegistrationService.GetService].
// This should not be used for looking up a service. Insead, use the `discover`
// method as it will contain all endpoints and associated metadata.
message GetServiceRequest {
  // Required. The name of the service to get.
  string name = 1;
}

// The request message for [RegistrationService.UpdateService][google.cloud.servicediscovery.v1alpha1.RegistrationService.UpdateService].
message UpdateServiceRequest {
  // Required. The updated service.
  Service service = 1;

  // Required. List of fields to be updated in this request.
  google.protobuf.FieldMask update_mask = 2;

  // Required. The name of the service to update.
  string name = 3;
}

// The request message for [RegistrationService.DeleteService][google.cloud.servicediscovery.v1alpha1.RegistrationService.DeleteService].
message DeleteServiceRequest {
  // Required. The name of the service to delete.
  string name = 1;
}

// Key/value metadata that exists on both services and endpoints.
message Metadata {
  // Required. Key/value metadata for the service or endpoint. This data can
  // be consumed by service clients.
  map<string, string> metadata = 1;
}

// The request message for [RegistrationService.SetService][google.cloud.servicediscovery.v1alpha1.RegistrationService.SetService].
message SetServiceRequest {
  // Required. The name of the service to set.
  string name = 1;

  // Required. Holds the metadata to set for the service.
  Service service = 2;

  // Required. A list of endpoints with initial fields set.
  repeated ServiceEndpoint service_endpoints = 3;
}

// The response message for [RegistrationService.SetService][google.cloud.servicediscovery.v1alpha1.RegistrationService.SetService].
message SetServiceResponse {
  // The service with the reset metadata.
  Service service = 1;

  // The list of reset service endpoints.
  repeated ServiceEndpoint service_endpoints = 2;
}

// The request message for [RegistrationService.UpdateServiceMetadata][google.cloud.servicediscovery.v1alpha1.RegistrationService.UpdateServiceMetadata].
message UpdateServiceMetadataRequest {
  // Required. The name of the service to update.
  string name = 1;

  // Required. The updated metadata to apply to the service.
  Metadata metadata = 2;
}

// Keys to metadata already associated with a service or endpoint.
message MetadataKeys {
  // Required. A list of keys.
  repeated string keys = 1;
}

// The request message for [RegistrationService.RemoveServiceMetadata][google.cloud.servicediscovery.v1alpha1.RegistrationService.RemoveServiceMetadata].
message RemoveServiceMetadataRequest {
  // Required. The name of the service to update.
  string name = 1;

  // Required. The metadata keys to delete.
  MetadataKeys keys = 2;
}

// The request message for [RegistrationService.CreateServiceEndpoint][google.cloud.servicediscovery.v1alpha1.RegistrationService.CreateServiceEndpoint].
message CreateServiceEndpointRequest {
  // Required. The resource name of the service that this endpoint provides.
  string parent = 1;

  // Required. A service endpoint with initial fields set.
  ServiceEndpoint service_endpoint = 2;
}

// The request message for [RegistrationService.ListServiceEndpoints][google.cloud.servicediscovery.v1alpha1.RegistrationService.ListServiceEndpoints].
message ListServiceEndpointsRequest {
  // Required. The resource name of the service whose endpoints we'd like to
  // list.
  string parent = 1;

  // Optional. The maximum number of items to return.
  int32 page_size = 2;

  // Optional. The next_page_token value returned from a previous List request,
  // if any.
  string page_token = 3;
}

// The response message for [RegistrationService.ListServiceEndpoints][google.cloud.servicediscovery.v1alpha1.RegistrationService.ListServiceEndpoints].
message ListServiceEndpointsResponse {
  // The list of service endpoints.
  repeated ServiceEndpoint service_endpoints = 1;

  // Token to retrieve the next page of results, or empty if there are no
  // more results in the list.
  string next_page_token = 2;
}

// The request message for [RegistrationService.GetServiceEndpoint][google.cloud.servicediscovery.v1alpha1.RegistrationService.GetServiceEndpoint].
// This should not be used to lookup service endpoints at runtime. Instead, use
// the `discover` method.
message GetServiceEndpointRequest {
  // Required. The name of the service endpoint to get.
  string name = 1;
}

// The request message for [RegistrationService.UpdateServiceEndpoint][google.cloud.servicediscovery.v1alpha1.RegistrationService.UpdateServiceEndpoint].
message UpdateServiceEndpointRequest {
  // Required. The updated service endpoint.
  ServiceEndpoint service_endpoint = 1;

  // Required. List of fields to be updated in this request.
  google.protobuf.FieldMask update_mask = 2;

  // Required. The name of the service endpoint to update.
  string name = 3;
}

// The request message for [RegistrationService.DeleteServiceEndpoint][google.cloud.servicediscovery.v1alpha1.RegistrationService.DeleteServiceEndpoint].
message DeleteServiceEndpointRequest {
  // Required. The name of the service endpoint to delete.
  string name = 1;
}

// The request message for
// [RegistrationService.UpdateServiceEndpointMetadata][google.cloud.servicediscovery.v1alpha1.RegistrationService.UpdateServiceEndpointMetadata].
message UpdateServiceEndpointMetadataRequest {
  // Required. The name of the service endpoint to update.
  string name = 1;

  // Required. The metadata to use to update.
  Metadata metadata = 2;
}

// The request message for
// [RegistrationService.RemoveServiceEndpointMetadata][google.cloud.servicediscovery.v1alpha1.RegistrationService.RemoveServiceEndpointMetadata].
message RemoveServiceEndpointMetadataRequest {
  // Required. The name of the service endpoint to update.
  string name = 1;

  // Required. The keys to delete.
  MetadataKeys keys = 2;
}
