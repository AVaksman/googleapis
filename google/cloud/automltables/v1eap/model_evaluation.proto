// Copyright 2018 Google LLC.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

syntax = "proto3";

package google.cloud.automltables.v1eap;

option go_package = "google.golang.org/genproto/googleapis/cloud/automltables/v1eap;automltables";
option java_outer_classname = "ModelEvaluationProto";
option java_package = "com.google.cloud.automltables.v1eap";


// Evaluation results of a model.
message ModelEvaluation {
  // Output only.
  // Resource name of the model evaluation.
  // Format:
  // `projects/{project_id}/locations/{location_id}/models/{model_id}/modelEvaluations/{model_evaluation_id}`
  string name = 1;

  TablesEvaluationMetrics evaluation_metrics = 2;
}

// Evaluation results of a model.
message TablesEvaluationMetrics {
  // Problem type specific evaluation metrics.
  oneof metrics {
    ClassificationMetrics classification_metrics = 1;

    RegressionMetrics regression_metrics = 2;
  }
}

// Next ID: 11
message ConfidenceMetricsEntry {
  // The confidence threshold value used to compute the metrics.
  double confidence_threshold = 1;

  // FPR = #false positives / (#false positives + #true negatives)
  double false_positive_rate = 2;

  // TPR = #true positives / (#true positives + #false negatvies)
  double true_positive_rate = 3;

  // Recall = #true positives / (#true positives + #false negatives).
  double recall = 4;

  // Precision = #true positives / (#true positives + #false positives).
  double precision = 5;

  // The harmonic mean of recall and precision.
  // (2 * precision * recall) / (precision + recall)
  double f1_score = 6;

  int64 true_positive_count = 7;

  int64 false_positive_count = 8;

  int64 true_negative_count = 9;

  int64 false_negative_count = 10;
}

// Metrics for classification problems.
message ClassificationMetrics {
  message CurveMetrics {
    // The label that curve metrics against to.
    string annotation_spec_id = 1;

    // Metrics that have confidence thresholds.
    // Precision-recall curve and ROC curve can be derived from it.
    repeated ConfidenceMetricsEntry confidence_metrics_entries = 2;

    // The area under the precision-recall curve.
    double auc_pr = 3;

    // The area under receiver operating characteristic curve.
    double auc_roc = 4;
  }

  // The area under the precision-recall curve.
  double auc_pr = 1 [deprecated = true];

  // The area under receiver operating characteristic curve.
  double auc_roc = 2 [deprecated = true];

  repeated CurveMetrics curve_metrics = 3;
}

// Metrics for regression problems.
message RegressionMetrics {
  double root_mean_squared_error = 1;

  double mean_absolute_error = 2;

  double mean_absolute_percentage_error = 3;

  double r_squared = 4;
}
