// Copyright 2018 Google LLC.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

syntax = "proto3";

package google.cloud.automltables.v1eap;

import "google/api/annotations.proto";
import "google/cloud/automltables/v1eap/dataset.proto";
import "google/cloud/automltables/v1eap/model.proto";
import "google/cloud/automltables/v1eap/model_evaluation.proto";
import "google/cloud/automltables/v1eap/predict.proto";
import "google/longrunning/operations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/field_mask.proto";

option go_package = "google.golang.org/genproto/googleapis/cloud/automltables/v1eap;automltables";
option java_outer_classname = "ServiceProto";
option java_package = "com.google.cloud.automltables.v1eap";


// AutoML Tables server API.
service AutoMlTablesService {
  // Creates an AutoML Tables dataset. ImportData must be called after a dataset
  // is created before models can be trained from this dataset.
  rpc CreateDataset(CreateDatasetRequest) returns (Dataset) {
    option (google.api.http) = {
      post: "/v1eap/{parent=projects/*/locations/*}/datasets"
      body: "dataset"
    };
  }

  // Imports data from the dataset's TableSource into the dataset. If a schema
  // for the dataset doesn't exist yet, schema inference will be run. If the
  // schema exists, then new dataset statistics will be regenerated.
  // The returned LRO can be queried for the updated dataset when the import
  // operation finishes.
  rpc ImportData(ImportDataRequest) returns (google.longrunning.Operation) {
    option (google.api.http) = {
      post: "/v1eap/{name=projects/*/locations/*/datasets/*}:import"
      body: "*"
    };
  }

  // Gets a dataset.
  rpc GetDataset(GetDatasetRequest) returns (Dataset) {
    option (google.api.http) = {
      get: "/v1eap/{name=projects/*/locations/*/datasets/*}"
    };
  }

  // Lists datasets in a project.
  rpc ListDatasets(ListDatasetsRequest) returns (ListDatasetsResponse) {
    option (google.api.http) = {
      get: "/v1eap/{parent=projects/*/locations/*}/datasets"
    };
  }

  // Updates the dataset. If the schema is updated, then dataset statistics will
  // be (re)generated.
  // The returned LRO can be queried for the updated dataset when the operation
  // finishes.
  rpc UpdateDataset(UpdateDatasetRequest) returns (google.longrunning.Operation) {
    option (google.api.http) = {
      patch: "/v1eap/{dataset.name=projects/*/locations/*/datasets/*}"
      body: "dataset"
    };
  }

  // Deletes a dataset.
  // The models created from this dataset won't be deleted.
  rpc DeleteDataset(DeleteDatasetRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1eap/{name=projects/*/locations/*/datasets/*}"
    };
  }

  // Trains a new model.
  // The returned LRO can be queried for the model when training finishes.
  rpc CreateModel(CreateModelRequest) returns (google.longrunning.Operation) {
    option (google.api.http) = {
      post: "/v1eap/{parent=projects/*/locations/*}/models"
      body: "model"
    };
  }

  // Gets a model.
  rpc GetModel(GetModelRequest) returns (Model) {
    option (google.api.http) = {
      get: "/v1eap/{name=projects/*/locations/*/models/*}"
    };
  }

  // Lists models in a project.
  rpc ListModels(ListModelsRequest) returns (ListModelsResponse) {
    option (google.api.http) = {
      get: "/v1eap/{parent=projects/*/locations/*}/models"
    };
  }

  // Deletes a model.
  rpc DeleteModel(DeleteModelRequest) returns (google.longrunning.Operation) {
    option (google.api.http) = {
      delete: "/v1eap/{name=projects/*/locations/*/models/*}"
    };
  }

  // Queries a model for a prediction.
  rpc Predict(PredictRequest) returns (PredictResponse) {
    option (google.api.http) = {
      post: "/v1eap/{name=projects/*/locations/*/models/*}:predict"
      body: "*"
    };
  }

  // Requests a batch prediction.
  rpc BatchPredict(BatchPredictRequest) returns (google.longrunning.Operation) {
    option (google.api.http) = {
      post: "/v1eap/{name=projects/*/locations/*/models/*}:batchPredict"
      body: "*"
    };
  }

  // Lists model evaluations for a given model.
  rpc ListModelEvaluations(ListModelEvaluationsRequest) returns (ListModelEvaluationsResponse) {
    option (google.api.http) = {
      get: "/v1eap/{parent=projects/*/locations/*/models/*}/modelEvaluations"
    };
  }
}

// Request message for AutoMlTablesService.CreateDataset.
message CreateDatasetRequest {
  // The resource name of the project to create the dataset for.
  string parent = 1;

  // The dataset to create.
  Dataset dataset = 2;
}

// Request message for AutoMlTablesService.ImportData.
message ImportDataRequest {
  // Required. Dataset must already exist.
  string name = 1;
}

// Request message for AutoMlTablesService.GetDataset.
message GetDatasetRequest {
  // The resource name of the dataset to retrieve.
  string name = 1;
}

// Request message for AutoMlTablesService.ListDatasets.
message ListDatasetsRequest {
  // The resource name of the project from which to list datasets.
  string parent = 1;
}

// Response message for AutoMlTablesService.ListDatasets.
message ListDatasetsResponse {
  // The datasets read.
  repeated Dataset datasets = 1;
}

// Request message for AutoMlTablesService.UpdateDataset.
message UpdateDatasetRequest {
  // The dataset which replaces the resource on the server.
  Dataset dataset = 1;

  // The update mask applies to the resource.
  google.protobuf.FieldMask update_mask = 2;
}

// Request message for AutoMlTablesService.DeleteDataset.
message DeleteDatasetRequest {
  // The resource name of the dataset to delete.
  string name = 1;
}

// Request message for AutoMlTablesService.CreateModel.
message CreateModelRequest {
  // Resource name of the parent dataset where the model is being created.
  string parent = 1;

  // The model to create.
  Model model = 2;
}

// Request message for AutoMlTablesService.ListModels.
message ListModelsRequest {
  // The resource name of the project from which to list models.
  string parent = 1;
}

// Request message for AutoMlTablesService.ListModels.
message GetModelRequest {
  // The resource name of the model to retrieve.
  string name = 1;
}

// Response message for AutoMlTablesService.ListModels.
message ListModelsResponse {
  // The models read.
  repeated Model models = 1;
}

// Request message for AutoMlTablesService.DeleteModel.
message DeleteModelRequest {
  // Resource name of the model being deleted.
  string name = 1;
}

// Request message for AutoMlTablesService.Predict.
message PredictRequest {
  // Name of the model requested to serve the prediction.
  string name = 1;

  // The JSON string representation of the input features.
  string input_features = 2;
}

// Response message for AutoMlTablesService.Predict.
message PredictResponse {
  // A prediction result is returned depending on the problem type.
  oneof type {
    // A prediction result for a classification problem.
    ClassificationResult classification = 1;

    // A prediction result for a regression problem.
    RegressionResult regression = 2;
  }
}

// Request message for AutoMlTablesService.BatchPredict.
message BatchPredictRequest {
  // Name of the model requested to serve the prediction.
  string name = 1;

  // The batch prediction input source.
  TableSource input_source = 2;

  // ID to join input and output rows.
  string id_column = 3;

  // Output for the batch prediction result.
  BatchPredictionOutput output_target = 4;
}

// Request message for AutoMlTablesService.ListModelEvaluations.
message ListModelEvaluationsRequest {
  // Resource name of the model to list the model evaluations for.
  string parent = 1;
}

// Response message for AutoMlTablesService.ListModelEvaluations.
message ListModelEvaluationsResponse {
  // List of model evaluations in the requested page.
  repeated ModelEvaluation model_evaluation = 1;
}
