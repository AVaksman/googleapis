// Copyright 2018 Google LLC.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

syntax = "proto3";

package google.cloud.datacatalog.v1beta1;

option cc_enable_arenas = true;
option go_package = "google.golang.org/genproto/googleapis/cloud/datacatalog/v1beta1;datacatalog";
option java_multiple_files = true;
option java_package = "com.google.cloud.datacatalog";

// Tags are used to attach custom metadata to Datahub resources. Tags conform to
// the specifications within their Tag Template.
message Tag {
  // The resource name of the tag in URL format. For example,
  // "projects/foo/datasets/bar/entries/baz/tags/t", where "t" is a
  // system-generated identifier.
  string name = 1;

  // The resource name of the tag template that this tag uses. For example,
  // "projects/a/tagTemplates/b".
  string template = 2;

  // The scope within the parent resource that this tag is attached to. If not
  // provided, the tag is attached to the parent resource itself. Deleting the
  // scope from the parent resource will delete all tags attached to that scope.
  // These fields cannot be updated after creation.
  oneof scope {
    // Resources like Entry can have schemas associated with them. This scope
    // allows users to attach tags to an individual column based on that schema.
    // For attaching a tag to a nested column, use '.' to separate the column
    // names: "outer_column.inner_column". For columns with '.' in their names,
    // wrap the name in '`': "`my.column`", "`outer.column`.inner_column".
    string column = 4;
  }

  // This maps the id of a tag field to the value of & additional information
  // about that field. Valid field IDs are defined by the tag's template.
  map<string, TagField> fields = 3;
}

// Contains the value and supporting information for a field within
// a [Tag][google.cloud.datacatalog.v1beta1.Tag].
message TagField {
  // Output only. The display name of this field.
  string display_name = 1;

  // The value of this field.
  oneof kind {
    // Holds the value for the tag field with double type.
    double double_value = 2;

    // Holds the value for the tag field with string type.
    string string_value = 3;

    // Holds the value for the tag field with boolean type.
    bool bool_value = 4;
  }
}

// Tag Templates provide the basic format of multiple fields which can be
// attached to Cloud Data Catalog resources as Tags.
//
// Tag Templates can be used as a data glossary as tag templates define the
// list of acceptable fields that can be applied within a Tag. When a Tag is
// applied to a resource, the Tag Template defines the mapping of accepted field
// names & types that can be used within the Tag.
//
// A Tag Template also allows you to make Tags using that template visible only
// to a certain group of users.
message TagTemplate {
  // The resource name of the tag template in URL format. For example,
  // "projects/a/tagTemplates/b".
  string name = 1;

  // The display name for this template.
  string display_name = 2;

  // Map of field name to the settings for the field. This map is an exhaustive
  // list of allowed fields, and must contain at least one field. A template is
  // limited to a maximum of 500 fields. Field names must match the following
  // regex pattern: /[A-Za-z0-9$-_]+/
  map<string, TagFieldTemplate> fields = 3;
}

// The template for an individual field within a TagTemplate.
message TagFieldTemplate {
  // The display name for this field.
  string display_name = 1;

  // The type of value this tag field can contain.
  FieldType type = 2;
}

message FieldType {
  enum PrimitiveType {
    // This is the default invalid value for a type.
    PRIMITIVE_TYPE_UNSPECIFIED = 0;

    // A double precision number.
    DOUBLE = 1;

    // An UTF-8 string.
    STRING = 2;

    // A boolean value.
    BOOL = 3;
  }

  oneof type_decl {
    PrimitiveType primitive_type = 2;
  }
}
