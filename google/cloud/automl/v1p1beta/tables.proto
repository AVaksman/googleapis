// Copyright 2019 Google LLC.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

syntax = "proto3";

package google.cloud.automl.v1p1beta;

import "google/cloud/automl/v1p1beta/classification.proto";
import "google/cloud/automl/v1p1beta/column_spec.proto";
import "google/cloud/automl/v1p1beta/data_items.proto";
import "google/cloud/automl/v1p1beta/data_stats.proto";
import "google/cloud/automl/v1p1beta/ranges.proto";
import "google/cloud/automl/v1p1beta/regression.proto";
import "google/cloud/automl/v1p1beta/temporal.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";
import "google/api/annotations.proto";

option go_package = "google.golang.org/genproto/googleapis/cloud/automl/v1p1beta;automl";
option java_multiple_files = true;
option java_package = "com.google.cloud.automl.v1p1beta";
option php_namespace = "Google\\Cloud\\AutoMl\\V1p1beta";
option ruby_package = "Google::Cloud::AutoML::V1p1beta";

// Metadata for a dataset used for AutoML Tables.
message TablesDatasetMetadata {
  // Type of structured data.
  enum TablesDatasetType {
    // An un-set value of this enum.
    TABLES_DATASET_TYPE_UNSPECIFIED = 0;

    // A generic dataset, suitable for most structured data problems.
    BASIC = 1;

    // A dataset suitable for forecasting problems.
    FORECASTING = 2;
  }

  // Type of structured data problem.
  // Default value is [BASIC][DatasetType.BASIC]
  TablesDatasetType tables_dataset_type = 10;

  // Output only. The table_spec_id of the primary table of this dataset.
  string primary_table_spec_id = 1;

  // column_spec_id of the primary table's column that should be used as the
  // training & prediction target.
  // This column must be non-nullable and have one of following data types
  // (otherwise model creation will error):
  //
  // * CATEGORY
  //
  // * FLOAT64
  //
  // If the type is CATEGORY , only up to
  // 100 unique values may exist in that column across all rows.
  //
  // NOTE: Updates of this field will instantly affect any other users
  // concurrently working with the dataset.
  string target_column_spec_id = 2;

  // column_spec_id of the primary table's column that should be used as the
  // weight column, i.e. the higher the value the more important the row will be
  // during model training.
  // Required type: FLOAT64.
  // Allowed values: 0 to 10000, inclusive on both ends; 0 means the row is
  //                 ignored for training.
  // If not set all rows are assumed to have equal weight of 1.
  // NOTE: Updates of this field will instantly affect any other users
  // concurrently working with the dataset.
  string weight_column_spec_id = 3;

  // column_spec_id of the primary table column which specifies a possible ML
  // use of the row, i.e. the column will be used to split the rows into TRAIN,
  // VALIDATE and TEST sets.
  // Required type: STRING.
  // This column, if set, must either have all of `TRAIN`, `VALIDATE`, `TEST`
  // among its values, or only have `TEST`, `UNASSIGNED` values. In the latter
  // case the rows with `UNASSIGNED` value will be assigned by AutoML. Note
  // that if a given ml use distribution makes it impossible to create a "good"
  // model, that call will error describing the issue.
  // If both this column_spec_id and primary table's time_column_spec_id are not
  // set, then all rows are treated as `UNASSIGNED`.
  // NOTE: Updates of this field will instantly affect any other users
  // concurrently working with the dataset.
  string ml_use_column_spec_id = 4;

  // Output only. Correlations between
  //
  // [TablesDatasetMetadata.target_column_spec_id][google.cloud.automl.v1p1beta.TablesDatasetMetadata.target_column_spec_id],
  // and other columns of the
  //
  // [TablesDatasetMetadataprimary_table][google.cloud.automl.v1p1beta.TablesDatasetMetadata.primary_table_spec_id].
  // Only set if the target column is set. Mapping from other column spec id to
  // its CorrelationStats with the target column.
  // This field may be stale, see the stats_update_time field for
  // for the timestamp at which these stats were last updated.
  map<string, CorrelationStats> target_column_correlations = 6;

  // Output only. The most recent timestamp when target_column_correlations
  // field and all descendant ColumnSpec.data_stats and
  // ColumnSpec.top_correlated_columns fields were last (re-)generated. Any
  // changes that happened to the dataset afterwards are not reflected in these
  // fields values. The regeneration happens in the background on a best effort
  // basis.
  google.protobuf.Timestamp stats_update_time = 7;
}

// Model metadata specific to AutoML Tables.
message TablesModelMetadata {
  // An additional configuration needed for FORECASTING prediction type.
  // By `key`, the union of the
  //
  // [key][forecasting_metadata][google.cloud.automl.v1p1beta.ColumnSpec.ForecastingMetadata.ColumnType.KEY]
  // column(s) is meant.
  // The table's rows are the data points of the time series, and their
  // timestamps are the values in the
  //
  // [primary_table's][google.cloud.automl.v1p1beta.TablesDatasetMetadata.primary_table_spec_id]
  // [time_column][google.cloud.automl.v1p1beta.TableSpec.time_column_spec_id]
  message ForecastingConfig {
    // Required. Describes the granularity of the time series. E.g. is a row
    // for each key given per hour, per 3 months or per year?
    // For each key the rows' timestamps should be spaced approximately
    // by this granularity period. Missing rows are allowed i.e. there may be
    // periods for which data for a given key is missing, also data for a key
    // may start late or end early. On the other hand within a single
    // granularity period no more than one row per key is allowed.
    // The time column must be at least as precise as this granularity requires.
    TimeGranularity granularity = 1;

    // Required. The number of periods the model is able to predict into the
    // future, where each period is one unit of granularity as defined by the
    // `granularity` field above. Forecasting only supports batch predictions
    // and when such a one is requested both historical data rows, as well as
    // to-be-predicted rows must be provided.
    // Prediction for a row fails if, for its key, the time difference between
    // its timestamp and timestamp of key's latest historical row is larger than
    // the horizon. If the asked to be predicted row's key is not present in the
    // historical data then its prediction fails if the time difference between
    // its timestamp and timestamp of latest historical row for any key is over
    // the horizon.
    int64 horizon_periods = 2;
  }

  // An additional configuration for a data split by percentages.
  // `train_set_percentage`, `validation_set_percentage`, and
  // `test_set_percentage` must all add up to 100.
  message SplitPercentageConfig {
    // Required. The percentage of data to reserve for the training set.
    int32 train_set_percentage = 1;

    // Required. The percentage of data to reserve for the validation set.
    int32 validation_set_percentage = 2;

    // Required. The percentage of data to reserve for the test set.
    int32 test_set_percentage = 3;
  }

  // The type of prediction this model is providing.
  //
  // The available and default prediction types depend on
  //
  // [target_column's][google.cloud.automl.v1p1beta.TablesModelMetadata.target_column_spec]
  //
  // [data_type][google.cloud.automl.v1p1beta.TablesModelMetadata.target_column_spec]
  // and, possibly, number of distinct values in that column:
  //
  // * CATEGORY, two distinct values:
  //      CLASSIFICATION_BINARY (default)
  //
  // * CATEGORY, more than two distinct values:
  //      CLASSIFICATION_MULTI_CLASS (default)
  //
  // * ARRAY(CATEGORY):
  //      CLASSIFICATION_MULTI_LABEL (default)
  //
  // * FLOAT64:
  //      REGRESSION (default)
  //      FORECASTING
  enum PredictionType {
    // An un-set value of this enum, must not be used.
    PREDICTION_TYPE_UNSPECIFIED = 0;

    // One out of two target values is picked per example.
    CLASSIFICATION_BINARY = 1;

    // One out of multiple target values is picked per example.
    CLASSIFICATION_MULTI_CLASS = 2;

    // Multiple values are picked per example.
    CLASSIFICATION_MULTI_LABEL = 3;

    // A value is chosen based on its relation to other values.
    REGRESSION = 4;

    // A value for a new timestamp is chosen, based on the historical time
    // series data. Time series for multiple entities, which are identified by
    //
    // [key][google.cloud.automl.v1p1beta.ColumnSpec.ForecastingMetadata.ColumnType.KEY],
    // column(s) may be forecast by a single model.
    // The use of this prediction type has following requirements:
    // *
    // [primary_table_spec's'][google.cloud.automl.v1p1beta.TablesDatasetMetadata.primary_table_spec_id]
    //
    // [time_column_spec_id][google.cloud.automl.v1p1beta.TableSpec.time_column_spec_id]
    //   must be set, and must be not
    //   [nullable][google.cloud.automl.v1p1beta.DataType.nullable].
    // * Each
    //
    // [input_feature_column_spec][google.cloud.automl.v1p1beta.TablesModelMetadata.input_feature_column_specs],
    //   except for time_column_spec must have
    //
    // [forecasting_metadata][google.cloud.automl.v1p1beta.ColumnSpec.forecasting_metadata]
    //   set (note that
    //
    // [target_column_spec][google.cloud.automl.v1p1beta.TablesModelMetadata.target_column_spec]
    //   is separate and needs not this information).
    // * The
    //
    // [forecasting_config][google.cloud.automl.v1p1beta.TablesModelMetadata.forecasting_config]
    //   must be set.
    FORECASTING = 5;
  }

  // Additional model configuration that may be required depending on the
  // prediction_type.
  oneof config {
    // Additional model configuration specific to FORECASTING.
    ForecastingConfig forecasting_config = 10;
  }

  // Additional optimization objective configuration. Required for
  // `MAXIMIZE_PRECISION_AT_RECALL` and `MAXIMIZE_RECALL_AT_PRECISION`,
  // otherwise unused.
  oneof additional_optimization_objective_config {
    // Required when optimization_objective is "MAXIMIZE_PRECISION_AT_RECALL".
    // Must be between 0 and 1, inclusive.
    float optimization_objective_recall_value = 17;

    // Required when optimization_objective is "MAXIMIZE_RECALL_AT_PRECISION".
    // Must be between 0 and 1, inclusive.
    float optimization_objective_precision_value = 18;
  }

  // The strategy used to split the data between training, validation, and test
  // sets. If set at model creation time, then it overrides
  //
  // [ml_use_column][google.cloud.automl.v1p1beta.TablesDatasetMetadata.ml_use_column_spec_id].
  // Otherwise, then the dataset properties will be used to determine a
  // strategy. If no strategy is set, then the dataset will be split using
  // SplitPercentageConfig with 80% to train set, 10% to validation set, and 10%
  // to test set.
  oneof data_split_strategy {
    // ID of the column use to split the table.
    string ml_use_column_spec_id = 14;

    // A data split strategy using percentage configuration.
    SplitPercentageConfig split_percentage_config = 15;
  }

  // The type of prediction this model is providing.
  PredictionType prediction_type = 9;

  // Column spec of the dataset's primary table's column the model is
  // predicting. Snapshotted when model creation started.
  // Only 3 fields are used:
  // name - May be set on CreateModel, if it's not then the ColumnSpec
  //        corresponding to the current target_column_spec_id of the dataset
  //        the model is trained from is used.
  //        If neither is set, CreateModel will error.
  // display_name - Output only.
  // data_type - Output only.
  ColumnSpec target_column_spec = 2;

  // Column specs of the dataset's primary table's columns, on which
  // the model is trained and which are used as the input for predictions.
  // The
  //
  // [target_column][google.cloud.automl.v1p1beta.TablesModelMetadata.target_column_spec]
  // as well as, according to dataset's state upon model creation,
  //
  // [weight_column][google.cloud.automl.v1p1beta.TablesDatasetMetadata.weight_column_spec_id],
  // and
  //
  // [ml_use_column][google.cloud.automl.v1p1beta.TablesDatasetMetadata.ml_use_column_spec_id]
  // must never be included here.
  //
  // Only 3 fields are used:
  //
  // * name - May be set on CreateModel, if set only the columns specified are
  //   used, otherwise all primary table's columns (except the ones listed
  //   above) are used for the training and prediction input.
  //
  // * display_name - Output only.
  //
  // * data_type - Output only.
  repeated ColumnSpec input_feature_column_specs = 3;

  // Output only. Column specs of the dataset's primary table's columns that
  // were excluded from training. Derived from the input feature column specs.
  // The
  //
  // [target_column][google.cloud.automl.v1p1beta.TablesModelMetadata.target_column_spec],
  //
  // [weight_column][google.cloud.automl.v1p1beta.TablesDatasetMetadata.weight_column_spec_id],
  // and
  //
  // [ml_use_column][google.cloud.automl.v1p1beta.TablesDatasetMetadata.ml_use_column_spec_id]
  // are not included in this list because they are automatically excluded as
  // prediction inputs.
  // Only 3 fields are used: name, display_name, and data_type
  repeated ColumnSpec excluded_feature_column_specs = 13;

  // Objective function the model is optimizing towards. The training process
  // creates a model that maximizes/minimizes the value of the objective
  // function over the validation set.
  //
  // The supported optimization objectives depend on the prediction type.
  // If the field is not set, a default objective function is used.
  //
  // CLASSIFICATION_BINARY:
  //   "MAXIMIZE_AU_ROC" (default) - Maximize the area under the receiver
  //                                 operating characteristic (ROC) curve.
  //   "MINIMIZE_LOG_LOSS" - Minimize log loss.
  //   "MAXIMIZE_AU_PRC" - Maximize the area under the precision-recall curve.
  //   "MAXIMIZE_PRECISION_AT_RECALL" - Maximize precision for a specified
  //                                   recall value.
  //   "MAXIMIZE_RECALL_AT_PRECISION" - Maximize recall for a specified
  //                                    precision value.
  //
  // CLASSIFICATION_MULTI_CLASS :
  //   "MINIMIZE_LOG_LOSS" (default) - Minimize log loss.
  //
  //
  // REGRESSION:
  //   "MINIMIZE_RMSE" (default) - Minimize root-mean-squared error (RMSE).
  //   "MINIMIZE_MAE" - Minimize mean-absolute error (MAE).
  //   "MINIMIZE_RMSLE" - Minimize root-mean-squared log error (RMSLE).
  string optimization_objective = 4;

  // Output only. Auxiliary information for each of the
  // input_feature_column_specs with respect to this particular model.
  repeated TablesModelColumnInfo tables_model_column_info = 5;

  // Required. The train budget of creating this model, expressed in milli node
  // hours i.e. 1,000 value in this field means 1 node hour.
  //
  // The training cost of the model will not exceed this budget. The final cost
  // will be attempted to be close to the budget, though may end up being (even)
  // noticeably smaller - at the backend's discretion. This especially may
  // happen when further model training ceases to provide any improvements.
  //
  // If the budget is set to a value known to be insufficient to train a
  // model for the given dataset, the training won't be attempted and
  // will error.
  //
  // The train budget must be between 1,000 and 72,000 milli node hours,
  // inclusive.
  int64 train_budget_milli_node_hours = 6;

  // Output only. The actual training cost of the model, expressed in milli
  // node hours, i.e. 1,000 value in this field means 1 node hour. Guaranteed
  // to not exceed the train budget.
  int64 train_cost_milli_node_hours = 7;

  // Use the entire training budget. This disables the early stopping feature.
  // By default, the early stopping feature is enabled, which means that AutoML
  // Tables might stop training before the entire training budget has been used.
  bool disable_early_stopping = 12;

  // ID of the time column. If set, then this overrides
  //
  // [time_column_spec_id][google.cloud.automl.v1p1beta.TableSpec.time_column_spec_id].
  // If unset, then
  //
  // [time_column_spec_id][google.cloud.automl.v1p1beta.TableSpec.time_column_spec_id]
  // will be used. Only used if
  //
  // [ml_use_column][google.cloud.automl.v1p1beta.TablesModelMetadata.ml_use_column_spec_id]
  // is not set.
  string time_column_spec_id = 16;

  // column_spec_id of the primary table's column that should be used as the
  // weight column. Higher values in this column give more importance to the row
  // during model training. Required column type: FLOAT64. Allowed values: 0 to
  // 10000, inclusive on both ends; 0 means the row is ignored for training.
  // If set, then this overrides
  //
  // [weight_column][google.cloud.automl.v1p1beta.TablesDatasetMetadata.weight_column_spec_id].
  // If unset, then it will be set to the value of
  //
  // [weight_column][google.cloud.automl.v1p1beta.TablesDatasetMetadata.weight_column_spec_id].
  // If neither weight column field is set, then all rows are assumed to have
  // equal weight of 1.
  string weight_column_spec_id = 19;

  // When true, create a compressed model. A compressed model is typically
  // significantly smaller, but at a small cost to the quality of the model's
  // predictions.
  bool compress = 20;

  // Must be set when [compress] is true. The name of the model to compress. The
  // model has to exist in the same project and location. The
  // [uncompressed_model] and its dataset cannot be deleted while being
  // compressed.
  string uncompressed_model = 21;
}

// Contains annotation details specific to Tables.
message TablesAnnotation {
  // Output only. A confidence estimate between 0.0 and 1.0, inclusive. A higher
  // value means greater confidence in the returned value.
  // For
  //
  // [target_column_spec][google.cloud.automl.v1p1beta.TablesModelMetadata.target_column_spec]
  // of FLOAT64 data type the score is not populated.
  float score = 1;

  // Output only. Only populated when
  //
  // [target_column_spec][google.cloud.automl.v1p1beta.TablesModelMetadata.target_column_spec]
  // has FLOAT64 data type. An interval in which the exactly correct target
  // value has 95% chance to be in.
  DoubleRange prediction_interval = 4;

  // The predicted value of the row's
  //
  // [target_column][google.cloud.automl.v1p1beta.TablesModelMetadata.target_column_spec].
  // The value depends on the column's DataType:
  //
  // * CATEGORY - the predicted (with the above confidence `score`) CATEGORY
  //   value.
  //
  // * FLOAT64 - the predicted (with above `prediction_interval`) FLOAT64 value.
  google.protobuf.Value value = 2;

  // Output only. Auxiliary information for each of the model's
  //
  // [input_feature_column_specs][google.cloud.automl.v1p1beta.TablesModelMetadata.input_feature_column_specs]
  // with respect to this particular prediction.
  // If no other fields than
  //
  // [column_spec_name][google.cloud.automl.v1p1beta.TablesModelColumnInfo.column_spec_name]
  // and
  //
  // [column_display_name][google.cloud.automl.v1p1beta.TablesModelColumnInfo.column_display_name]
  // would be populated, then this whole field is not.
  repeated TablesModelColumnInfo tables_model_column_info = 3;
}

// An information specific to given column and Tables Model, in context
// of the Model and the predictions created by it.
message TablesModelColumnInfo {
  // Output only. The name of the ColumnSpec describing the column. Not
  // populated when this proto is outputted to BigQuery.
  string column_spec_name = 1;

  // Output only. The display name of the column (same as the display_name of
  // its ColumnSpec).
  string column_display_name = 2;

  // Output only. When given as part of a Model (always populated):
  // Measurement of how much model predictions correctness on the TEST data
  // depend on values in this column. A value between 0 and 1, higher means
  // higher influence. These values are normalized - for all input feature
  // columns of a given model they add to 1.
  //
  // When given back by Predict (populated iff
  // [feature_importance
  // param][google.cloud.automl.v1p1beta.PredictRequest.params] is set) or
  // Batch Predict (populated iff
  // [feature_importance][google.cloud.automl.v1p1beta.PredictRequest.params]
  // param is set):
  // Measurement of how impactful for the prediction returned for the given row
  // the value in this column was. A value between 0 and 1, higher means larger
  // impact. These values are normalized - for all input feature columns of a
  // single predicted row they add to 1.
  float feature_importance = 3;
}
