// Copyright 2018 Google LLC.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

syntax = "proto3";

package google.cloud.automl.v1beta1;

import "google/api/annotations.proto";
import "google/cloud/automl/v1beta1/column_spec.proto";
import "google/protobuf/struct.proto";

option go_package = "google.golang.org/genproto/googleapis/cloud/automl/v1beta1;automl";
option java_multiple_files = true;
option java_package = "com.google.cloud.automl.v1beta1";
option php_namespace = "Google\\Cloud\\AutoMl\\V1beta1";


// Metadata for a dataset used for AutoML Tables.
message TablesDatasetMetadata {
  // Output only. The table_spec_id of the primary table of this dataset.
  string primary_table_spec_id = 1;

  // column_spec_id of the primary table's column that should be used as the
  // training & prediction target.
  // This column must be non-nullable and have one of following data types
  // (otherwise model creation will error):
  // * CATEGORY
  // * ARRAY(CATEGORY)
  // * FLOAT64
  // Furthermore, if the type is CATEGORY or ARRAY(CATEGORY), then only up to
  // 25 unique values may exist in that column across all rows, but for
  // ARRAY(CATEGORY) unique values are counted as elements of the ARRAY (i.e.
  // following 3 ARRAY-s: [A, B], [A], [B] are counted as having 2 unique
  // values).
  //
  // NOTE: Updates of this field will instantly affect any other users
  // concurrently working with the dataset.
  string target_column_spec_id = 2;

  // column_spec_id of the primary table's column that should be used as the
  // weight column, i.e. the higher the value the more important the row will be
  // during model training.
  // Required type: FLOAT64.
  // Allowed values: 0 to 10000, inclusive on both ends; 0 means the row is
  //                 ignored for training.
  // If not set all rows are assumed to have equal weight of 1.
  // NOTE: Updates of this field will instantly affect any other users
  // concurrently working with the dataset.
  string weight_column_spec_id = 3;

  // column_spec_id of the primary table column which specifies a possible ML
  // use of the row, i.e. the column will be used to split the rows into TRAIN,
  // VALIDATE and TEST sets.
  // Required type: STRING.
  // This column, if set, must either have all of `TRAIN`, `VALIDATE`, `TEST`
  // among its values, or only have `TEST`, `UNASSIGNED` values. In the latter
  // case the rows with `UNASSIGNED` value will be assigned by AutoML. Note
  // that if a given ml use distribution makes it impossible to create a "good"
  // model, that call will error describing the issue.
  // If both this column_spec_id and primary table's time_column_spec_id are not
  // set, then all rows are treated as `UNASSIGNED`.
  // NOTE: Updates of this field will instantly affect any other users
  // concurrently working with the dataset.
  string ml_use_column_spec_id = 4;
}

// Model metadata specific to AutoML Tables.
message TablesModelMetadata {
  // Column spec of the dataset's primary table's column the model is
  // predicting. Snapshotted when model creation started.
  // Only 3 fields are used:
  // column_spec_id - May be set on CreateModel, if it's not then the current
  //                  target_column_spec_id of the dataset the model is trained
  //                  from is used.
  //                  If neither is set, CreateModel will error.
  // display_name - Output only.
  // data_type - Output only.
  ColumnSpec target_column_spec = 2;

  // Column specs of the dataset's primary table's columns, on which
  // the model is trained and which are used as the input for predictions.
  // The
  //
  // [target_column][google.cloud.automl.v1beta1.TablesModelMetadata.target_column_spec]
  // as well as, according to dataset's state upon model creation,
  //
  // [weight_column][google.cloud.automl.v1beta1.TablesDatasetMetadata.weight_column_spec_id],
  // and
  //
  // [ml_use_column][google.cloud.automl.v1beta1.TablesDatasetMetadata.ml_use_column_spec_id]
  // must never be included here.
  // Only 3 fields are used:
  // column_spec_id - May be set on CreateModel, if set only the columns
  //                 specified are used, otherwise all  primary table's columns
  //                 (except the ones listed above) are used for the training
  //                 and prediction input.
  // display_name - Output only.
  // data_type - Output only.
  repeated ColumnSpec input_feature_column_specs = 3;
}

// Contains annotation details specific to Tables.
message TablesAnnotation {
  // Output only. A confidence estimate between 0.0 and 1.0, inclusive. A higher
  // value means greater confidence in the returned value.
  // For
  //
  // [target_column_spec][google.cloud.automl.v1beta1.TablesModelMetadata.target_column_spec]
  // of ARRAY(CATEGORY) data type, this is a confidence that one of the values
  // in the ARRAY would be the provided value.
  // For
  //
  // [target_column_spec][google.cloud.automl.v1beta1.TablesModelMetadata.target_column_spec]
  // of FLOAT64 data type the score is not populated.
  float score = 1;

  // The predicted value of the row's
  //
  // [target_column][google.cloud.automl.v1beta1.TablesModelMetadata.target_column_spec].
  // The value depends on the column's DataType:
  // CATEGORY - the predicted (with the above confidence `score`) CATEGORY
  //            value.
  // FLOAT64 - the predicted (with the above confidence `score`) FLOAT64 value.
  // ARRAY(CATEGORY) - CATEGORY value meaning that this value would be in the
  //                   ARRAY in that column (with the above confidence `score`).
  google.protobuf.Value value = 2;
}
