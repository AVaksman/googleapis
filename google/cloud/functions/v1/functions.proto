// Copyright 2017 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package google.cloud.functions.v1;

import "google/api/annotations.proto";
import "google/cloud/functions/v1/operations.proto";
import "google/longrunning/operations.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";

option go_package = "google.golang.org/genproto/googleapis/cloud/functions/v1;functions";
option java_multiple_files = true;
option java_outer_classname = "FunctionsProto";
option java_package = "com.google.cloud.functions.v1";
option objc_class_prefix = "GCF";


// A service that application uses to manipulate triggers and functions.
service CloudFunctionsService {
  // Returns a list of functions that belong to the requested project.
  rpc ListFunctions(ListFunctionsRequest) returns (ListFunctionsResponse) {
    option (google.api.http) = { get: "/v1/{parent=projects/*/locations/*}/functions" };
  }

  // Returns a function with the given name from the requested project.
  rpc GetFunction(GetFunctionRequest) returns (CloudFunction) {
    option (google.api.http) = { get: "/v1/{name=projects/*/locations/*/functions/*}" };
  }

  // Creates a new function. If a function with the given name already exists in
  // the specified project, the long running operation will return
  // `ALREADY_EXISTS` error.
  rpc CreateFunction(CreateFunctionRequest) returns (google.longrunning.Operation) {
    option (google.api.http) = { post: "/v1/{location=projects/*/locations/*}/functions" body: "function" };
  }

  // Updates existing function.
  rpc UpdateFunction(UpdateFunctionRequest) returns (google.longrunning.Operation) {
    option (google.api.http) = { patch: "/v1/{function.name=projects/*/locations/*/functions/*}" body: "function" };
  }

  // Deletes a function with the given name from the specified project. If the
  // given function is used by some trigger, the trigger will be updated to
  // remove this function.
  rpc DeleteFunction(DeleteFunctionRequest) returns (google.longrunning.Operation) {
    option (google.api.http) = { delete: "/v1/{name=projects/*/locations/*/functions/*}" };
  }

  // Invokes synchronously deployed function. To be used for testing, very
  // limited traffic allowed.
  rpc CallFunction(CallFunctionRequest) returns (CallFunctionResponse) {
    option (google.api.http) = { post: "/v1/{name=projects/*/locations/*/functions/*}:call" body: "*" };
  }

  // Returns a signed URL for uploading a function source code.
  // For more information about the signed URL usage see:
  // https://cloud.google.com/storage/docs/access-control/signed-urls
  // Once the function source code upload is complete, the used signed
  // URL should be provided in CreateFunction or UpdateFunction request
  // as a reference to the function source code.
  rpc GenerateUploadUrl(GenerateUploadUrlRequest) returns (GenerateUploadUrlResponse) {
    option (google.api.http) = { post: "/v1/{parent=projects/*/locations/*}/functions:generateUploadUrl" body: "*" };
  }

  // Returns a signed URL for downloading deployed function source code.
  // The URL is only valid for a limited period and should be used within
  // minutes after generation.
  // For more information about the signed URL usage see:
  // https://cloud.google.com/storage/docs/access-control/signed-urls
  rpc GenerateDownloadUrl(GenerateDownloadUrlRequest) returns (GenerateDownloadUrlResponse) {
    option (google.api.http) = { post: "/v1/{name=projects/*/locations/*/functions/*}:generateDownloadUrl" body: "*" };
  }
}

// Describes a Cloud Function that contains user computation executed in
// response to an event. It encapsulate function and triggers configurations.
message CloudFunction {
  // A user-defined name of the function. Function names must be unique
  // globally and match pattern `projects/*/locations/*/functions/*`
  string name = 1;

  // User-provided description of a function.
  string description = 2;

  // The location of the function source code.
  oneof source_code {
    // The Google Cloud Storage URL, starting with gs://, pointing to the zip
    // archive which contains the function.
    string source_archive_url = 3;

    // **Beta Feature**
    //
    // The source repository where a function is hosted.
    SourceRepository source_repository = 4;

    // The Google Cloud Storage signed URL used for source uploading, generated
    // by [google.cloud.functions.v1.GenerateUploadUrl][]
    string source_upload_url = 16;
  }

  // An event that triggers the function.
  oneof trigger {
    // An HTTPS endpoint type of source that can be triggered via URL.
    HttpsTrigger https_trigger = 5;

    // A source that fires events in response to a condition in another service.
    EventTrigger event_trigger = 6;
  }

  // Output only. Status of the function deployment.
  CloudFunctionStatus status = 7;

  // The name of the function (as defined in source code) that will be
  // executed. Defaults to the resource name suffix, if not specified. For
  // backward compatibility, if function with given name is not found, then the
  // system will try to use function named "function".
  // For Node.js this is name of a function exported by the module specified
  // in `source_location`.
  string entry_point = 8;

  // The function execution timeout. Execution is considered failed and
  // can be terminated if the function is not completed at the end of the
  // timeout period. Defaults to 60 seconds.
  google.protobuf.Duration timeout = 9;

  // The amount of memory in MB available for a function.
  // Defaults to 256MB.
  int32 available_memory_mb = 10;

  // Output only. The email of the function's service account.
  string service_account_email = 11;

  // Output only. The last update timestamp of a Cloud Function.
  google.protobuf.Timestamp update_time = 12;

  // Output only.
  // The version identifier of the Cloud Function. Each deployment attempt
  // results in a new version of a function being created.
  int64 version_id = 14;

  // Labels associated with this Cloud Function.
  map<string, string> labels = 15;
}

// Describes SourceRepository, used to represent parameters related to
// source repository where a function is hosted.
message SourceRepository {
  // The URL pointing to the hosted repository where the function is defined.
  // There are supported Cloud Source Repository URLs in the following
  // formats:
  //
  // To refer to a specific commit:
  // `https://source.developers.google.com/projects/*/repos/*/revisions/*/paths/*`
  // To refer to a moveable alias (branch):
  // `https://source.developers.google.com/projects/*/repos/*/moveable-aliases/*/paths/*`
  // In particular, to refer to HEAD use `master` moveable alias.
  // To refer to a specific fixed alias (tag):
  // `https://source.developers.google.com/projects/*/repos/*/fixed-aliases/*/paths/*`
  //
  // You may omit `paths/*` if you want to use the main directory.
  string url = 1;

  // Output only. The URL pointing to the hosted repository where the function
  // were defined at the time of deployment. It always points to a specific
  // commit in the format described above.
  string deployed_url = 2;
}

// Describes HttpsTrigger, could be used to connect web hooks to function.
message HttpsTrigger {
  // Output only. The deployed url for the function.
  string url = 1;
}

// Describes EventTrigger, used to request events be sent from another
// service.
message EventTrigger {
  // Required. The type of event to observe. For example:
  // `google.storage.object.finalized` and
  // `google.firebase.analytics.event.log`.
  //
  // Event type consists of three parts:
  //  1. namespace: The domain name of the organization in reverse-domain
  //     notation (e.g. `acme.net` appears as `net.acme`) and any orginization
  //     specific subdivisions. If the organization's top-level domain is `com`,
  //     the top-level domain is ommited (e.g. `google.com` appears as
  //     `google`). For example, `google.storage` and
  //     `google.firebase.analytics`.
  //  2. resource type: The type of resource on which event ocurs. For
  //     example, the Google Cloud Storage API includes the type `object`.
  //  3. action: The action that generates the event. For example, actions for
  //     a Google Cloud Storage Object include 'finalize' and 'delete'.
  // These parts are lower case and joined by '.'.
  string event_type = 1;

  // Required. The resource(s) from which to observe events, for example,
  // `projects/_/buckets/myBucket`.
  //
  // Not all syntactically correct values are accepted by all services. For
  // example:
  //
  // 1. The authorization model must support it. Google Cloud Functions
  //    only allows EventTriggers to be deployed that observe resources in the
  //    same project as the `CloudFunction`.
  // 2. The resource type must match the pattern expected for an
  //    `event_type`. For example, an `EventTrigger` that has an
  //    `event_type` of "google.pubsub.topic.publish" should have a resource
  //    that matches Google Cloud Pub/Sub topics.
  //
  // Additionally, some services may support short names when creating an
  // `EventTrigger`. These will always be returned in the normalized "long"
  // format.
  //
  // See each *service's* documentation for supported formats.
  string resource = 2;

  // The hostname of the service that should be observed.
  //
  // If no string is provided, the default service implementing the API will
  // be used. For example, `storage.googleapis.com` is the default for all
  // event types in the `google.storage` namespace.
  string service = 3;

  // Specifies policy for failed executions.
  FailurePolicy failure_policy = 5;
}

// Describes the policy in case of function's execution failure.
// If empty, then defaults to ignoring failures (i.e. not retrying them).
message FailurePolicy {
  // Describes the retry policy in case of function's execution failure.
  // A function execution will be retried on any failure.
  // A failed execution will be retried up to 7 days with an exponential backoff
  // (capped at 10 seconds).
  // Retried execution is charged as any other execution.
  message Retry {

  }

  // Defines the action taken in case of a function execution failure.
  oneof action {
    // If specified, then the function will be retried in case of a failure.
    Retry retry = 1;
  }
}

// Request for the `CreateFunction` method.
message CreateFunctionRequest {
  // The project and location in which the function should be created, specified
  // in the format `projects/*/locations/*`
  string location = 1;

  // Function to be created.
  CloudFunction function = 2;
}

// Request for the `UpdateFunction` method.
message UpdateFunctionRequest {
  // New version of the function.
  CloudFunction function = 1;

  // Required list of fields to be updated in this request.
  google.protobuf.FieldMask update_mask = 2;
}

// Request for the `GetFunction` method.
message GetFunctionRequest {
  // The name of the function which details should be obtained.
  string name = 1;
}

// Request for the `ListFunctions` method.
message ListFunctionsRequest {
  // The project and location from which the function should be listed,
  // specified in the format `projects/*/locations/*`
  // If you want to list functions in all locations, use "-" in place of a
  // location.
  string parent = 1;

  // Maximum number of functions to return per call.
  int32 page_size = 2;

  // The value returned by the last
  // `ListFunctionsResponse`; indicates that
  // this is a continuation of a prior `ListFunctions` call, and that the
  // system should return the next page of data.
  string page_token = 3;
}

// Response for the `ListFunctions` method.
message ListFunctionsResponse {
  // The functions that match the request.
  repeated CloudFunction functions = 1;

  // If not empty, indicates that there may be more functions that match
  // the request; this value should be passed in a new
  // [google.cloud.functions.v1.ListFunctionsRequest][google.cloud.functions.v1.ListFunctionsRequest]
  // to get more functions.
  string next_page_token = 2;
}

// Request for the `DeleteFunction` method.
message DeleteFunctionRequest {
  // The name of the function which should be deleted.
  string name = 1;
}

// Request for the `CallFunction` method.
message CallFunctionRequest {
  // The name of the function to be called.
  string name = 1;

  // Input to be passed to the function.
  string data = 2;
}

// Response of `CallFunction` method.
message CallFunctionResponse {
  // Execution id of function invocation.
  string execution_id = 1;

  // Result populated for successful execution of synchronous function. Will
  // not be populated if function does not return a result through context.
  string result = 2;

  // Either system or user-function generated error. Set if execution
  // was not successful.
  string error = 3;
}

// Request of `GenerateSourceUploadUrl` method.
message GenerateUploadUrlRequest {
  // The project and location in which the Google Cloud Storage signed URL
  // should be generated, specified in the format `projects/*/locations/*
  string parent = 1;
}

// Response of `GenerateSourceUploadUrl` method.
message GenerateUploadUrlResponse {
  // The generated Google Cloud Storage signed URL that should be used for a
  // function source code upload. The uploaded file should be a zip archive
  // which contains a function.
  string upload_url = 1;
}

// Request of `GenerateDownloadUrl` method.
message GenerateDownloadUrlRequest {
  // The name of function for which source code Google Cloud Storage signed
  // URL should be generated.
  string name = 1;

  // The optional version of function. If not set, default, current version
  // is used.
  uint64 version_id = 2;
}

// Response of `GenerateDownloadUrl` method.
message GenerateDownloadUrlResponse {
  // The generated Google Cloud Storage signed URL that should be used for
  // function source code download.
  string download_url = 1;
}

// Describes the current stage of a deployment.
enum CloudFunctionStatus {
  // Not specified. Invalid state.
  CLOUD_FUNCTION_STATUS_UNSPECIFIED = 0;

  // Function has been succesfully deployed and is serving.
  ACTIVE = 1;

  // Function deployment failed and the function isn’t serving.
  OFFLINE = 2;

  // Function is being created or updated.
  DEPLOY_IN_PROGRESS = 3;

  // Function is being deleted.
  DELETE_IN_PROGRESS = 4;

  // Function deployment failed and the function serving state is undefined.
  // The function should be updated or deleted to move it out of this state.
  UNKNOWN = 5;
}
