// Copyright 2018 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package healthcare.scribe.v1alpha;

import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";

option java_package = "com.google.healthcare.scribe.v1alpha";


// A representation of a recorded medical conversation.
message Encounter {
  // Output only. Unique identifier for the encounter in the format of
  // `encounters/*`. Assigned by the server.
  string name = 1;

  // The timestamp when the appointment took place.
  google.protobuf.Timestamp appointment_time = 2;

  // The reason for the encounter, such as "Office visit", "Follow Up", etc.
  string purpose = 3;

  // Information about the review of this encounter.
  EncounterReviewInfo review_info = 4;

  // Required. Information about the clinic where this encounter was hosted.
  EncounterClinicInfo clinic_info = 5;
}

// A text transcription for the audio of a medical conversation. One
// [Encounter][healthcare.scribe.v1alpha.Encounter] might have multiple
// transcripts. For example, a transcript generated by automatic speech
// recognition or a transcript with manual corrections.
message Transcript {
  // Output only. Unique identifier for the transcript in the format of
  // `encounters/*/transcripts/*`. Assigned by the server.
  string name = 1;

  // The audio file associated with this transcript.
  AudioFile audio = 2;

  // Sequential list of transcription results corresponding to sequential
  // portions of audio that have been split by speaker identity.
  repeated SpeakerTurn speaker_turns = 3;

  // Indicated whether the transcript is learned or corrected.
  TranscriptSource source = 4;
}

// A text summary of a clinical conversation, as is typically documented in a
// patient's electronic health record.
message InputNote {
  // Output only. Unique identifier for the note in the format
  // `encounters/*/inputNotes/*`. Assigned by the server.
  string name = 1;

  // Role of the operator writing this note.
  OperatorRole operator_role = 2;

  // The reason for the patient visit. This is typically 1-2 sentences.
  string chief_complaint = 3;

  // History of present illness description. If written as a problem list, there
  // should be one text entity for each problem. If multiple problems are
  // written up as one complex description, a single text entity should be
  // specified without a title.
  History history_of_present_illness = 4;

  // The findings discovered during the encounter organized by system and
  // symptom.
  ReviewOfSystems review_of_systems = 5;

  // The patient's past medical history. If organized per problem, there should
  // be one text entity for each problem, and the problem name should be the
  // title.
  History medical_history = 6;

  // The patient's family history of diseases or conditions. When possible,
  // there should be one for each relative, and the relationship should be the
  // title.
  History family_history = 7;

  // The patient's surgical history. There should be one text entity per
  // procedure. The procedure name should be the title, and the description
  // should contain all pertinent procedure details.
  History surgical_history = 8;

  // The patient's social history. When possible, there should be one for each
  // distinct category. For example, "tobacco use", "employment", or "children",
  // and the category should be the title.
  History social_history = 9;

  // The patient's allergies. When possible, there should be one per allergen or
  // medication, and the allergen or medication should be the title. If there
  // are no known allergies, include a single text entity with no title and a
  // description that says something like "No known allergies".
  repeated TextEntity allergies = 10;

  // The list of medications relevant to the encounter. There should be one
  // text entity for each medication. The medication name should be the title,
  // and all other relevant information (such as taking, not taking,
  // discontinued, frequency, dosage, etc.) should be specified in the
  // description.
  repeated TextEntity medications = 11;

  // The findings discovered during the physical exam part of the encounter
  // organized by system.
  PhysicalExam physical_exam = 12;

  // The physician's assessment based on the encounter and plan for treatment.
  AssessmentAndPlan assessment_and_plan = 13;
}

// Wrapper message for an audio file.
message AudioFile {
  // The audio source, specified as a Google Cloud Storage URI.
  oneof audio_source {
    // URI that points to a file that contains audio data bytes as specified in
    // `RecognitionConfig`. Currently, only Google Cloud Storage URIs are
    // supported, which must be specified in the following format:
    // `gs://bucket_name/object_name` (other URI formats return
    // [google.rpc.Code.INVALID_ARGUMENT][google.rpc.Code.INVALID_ARGUMENT]). For more information, see
    // [Request URIs](https://cloud.google.com/storage/docs/reference-uris).
    string uri = 1;
  }
}

// Details relevant to the human scribing of an encounter.
message EncounterReviewInfo {
  // A list of details about the human operators who documented this encounter.
  repeated OperatorAnalysis operator_analyses = 1;

  // A human assessment of the quality of the audio file and medical provider's
  // behavior to generate a note solely from the encounter audio.
  EncounterQuality encounter_quality = 2;
}

// Information related to the clinic where an encounter was hosted.
message EncounterClinicInfo {
  // Required. The unique code of the healthcare system providing the encounter.
  string source_healthcare_system = 1;

  // Identifier for the primary medical physician in the encounter.
  // Each physician should have a unique id. If the same physician performed two
  // different encounters, then this field should be equal for both.
  string physician_name = 2;

  // Medical field of study for the encounter. For example:
  // "laryngology", or "ophthalmology".
  string specialty = 3;
}

// Details about a human operator who helped document this encounter.
message OperatorAnalysis {
  // Identifier for the scribing operator. Each operator should have a unique
  // id. If the same operator acted on two different encounters, then this field
  // should be equal for both.
  string name = 1;

  // Type of the operator.
  OperatorRole role = 2;

  // Total elapsed time for this operator to complete the task specified by
  // their role.
  // .
  google.protobuf.Duration analysis_duration = 3;

  // Audit score for the encounter. Value must be in the range from 0 to 100,
  // inclusive.
  int32 audit_score = 4;

  // Rating for the encounter. Value must be in the range from 0 to 100,
  // inclusive.
  int32 encounter_rating = 5;

  // Text-based comments from the operator. Length must be no more than 200
  // characters. May be empty if the operator had no comments.
  string operator_comment = 6;
}

// Quality of the encounter.
message EncounterQuality {
  // Quality assessment of the input audio clarity. Value must be between 0.0
  // and 1.0, inclusive.
  float audio_clarity = 1;

  // Quality assessment of the provider structure. For example, how well the
  // physician covered everything to create a note. Value must be between 0.0
  // and 1.0, inclusive.
  float provider_structure = 2;

  // Quality assessment of the provider summarization. For example, how well the
  // physician summarized the visit at the end. Value must be between 0.0 and
  // 1.0, inclusive.
  float provider_summarization = 3;
}

// Representation of a portion of a medical description.
message TextEntity {
  // Title for this text entity. For problem list oriented notes, the title
  // could be the name of the problem.
  string title = 1;

  // Prose that describe events clinically relevant to this text entity of the
  // encounter. This should be plain text without any markup.
  string description = 2;
}

// A history description.
message History {
  // List of text entities of the history description.
  repeated TextEntity text_entities = 1;
}

// A physician's assessment based on an encounter and plan for treatment.
message AssessmentAndPlan {
  // If organized per problem, there should be one text entity for each problem.
  // The problem and assessment should be captured in the title, and the plan
  // should be described in the description. If multiple problems are written up
  // as one complex assessment and plan, a single text entity should be
  // specified without a title.
  repeated TextEntity text_entities = 13;
}

// A collection of all systems asked about in the encounter.
message ReviewOfSystems {
  // A reviewed system asked about in the encounter.
  message ReviewedSystem {
    // A representation of a symptom description.
    message Symptom {
      // Name of the symptom asked about. For example, "fever", "muscle ache",
      // or "cough".
      string symptom_name = 1;

      // Whether the patient was positive or negative for the symption.
      SymptomResult finding = 2;

      // Detailed description of the symptom. For example, "cough with thick and
      // green colored phlegm".
      string details = 3;
    }

    // Name of the medical system. For example, "constitutional",
    // "musculoskeletal", or "respiratory".
    string system_name = 1;

    // List of findings for each symptom asked about in the encounter.
    repeated Symptom symptoms = 2;
  }

  // List of all systems asked about in the encounter.
  repeated ReviewedSystem reviewed_systems = 1;
}

// A representation of a physical exam.
message PhysicalExam {
  // A physical system asked about in the encounter.
  message PhysicalSystem {
    // A finding in a physical exam.
    message Finding {
      // Indicates whether the finding is normal or not.
      ExamResult exam_result = 1;

      // Detailed description. For example, "no swelling on the ankles" or
      // "wheezing noted in left upper lobe".
      string details = 2;
    }

    // Name of the system. For example, "musculoskeletal", or "respiratory".
    string system_name = 1;

    // List of findings discovered during the physical exam.
    repeated Finding findings = 2;
  }

  // List of all systems asked about in the encounter.
  repeated PhysicalSystem physical_systems = 1;
}

// A recognized audio for a given speaker.
message SpeakerTurn {
  // Only the alternative with the highest confidence returned.
  repeated SpeakerTurnAlternative alternatives = 1;
}

// The recognized audio text.
message SpeakerTurnAlternative {
  // The text of this portion of the transcript.
  string recognized_text = 1;

  // Information about the speaker who uttered this portion of the transcript.
  Speaker speaker = 4;

  // A list of word-specific information for each recognized word.
  repeated WordInfo words = 3;
}

// Information about a speaker who uttered some portion of audio.
message Speaker {
  // A unique identifier within this encounter for the current speaker.
  // The identifier is arbitrary but consistent for a given speaker within the
  // encounter. If the same speaker appears in a different
  // [Encounter][healthcare.scribe.v1alpha.Encounter], their `speaker_id` may be
  // different for that encounter.
  string speaker_id = 1;

  // The confidence estimate between 0.0 and 1.0. A higher number
  // indicates an estimated greater likelihood that the speaker was correctly
  // identified. This field is not guaranteed to be accurate and users should
  // not rely on it to be always provided.
  // The default of 0.0 is a sentinel value indicating `confidence` was not set.
  float confidence = 2;
}

// Word-specific information for recognized words.
message WordInfo {
  // Time offset relative to the beginning of the audio, and corresponding to
  // the start of the spoken word.
  google.protobuf.Duration start_time = 1;

  // Time offset relative to the beginning of the audio, and corresponding to
  // the end of the spoken word.
  google.protobuf.Duration end_time = 2;

  // The phrase uttered between start_time and end_time. For machine-inferred
  // transcripts, this will contain a single word. For transcript corrections,
  // this may also be a phrase when correcting multiple words with unclear word
  // boundaries. For example, `{50.0, 51.0, "playground”}` could be corrected to
  // `{50.0, 51.0, "lay down”}` if the word segmentation is not known.
  string phrase = 3;

  // The confidence estimate between 0.0 and 1.0. A higher number
  // indicates an estimated greater likelihood that the recognized words are
  // correct. This field is not guaranteed to be accurate and users should not
  // rely on it to be always provided.
  // The default of 0.0 is a sentinel value indicating `confidence` was not set.
  float confidence = 4;
}

// Operator roles.
enum OperatorRole {
  // The operator role is not specified, or it is unknown.
  OPERATOR_ROLE_UNSPECIFIED = 0;

  // The operator role is an initial scribe.
  INITIAL_SCRIBE = 1;

  // The operator role is an audio/visual auditor.
  AUDIO_VISUAL_AUDITOR = 2;

  // The operator role is the first visual auditor.
  VISUAL_AUDITOR_1 = 3;

  // The operator role is the second vidual auditor.
  VISUAL_AUDITOR_2 = 4;

  // The operator role is in charge of the post delivery audit.
  POST_DELIVERY_AUDIT = 5;

  // The operator role is clinical.
  CLINICAL = 6;
}

// Symptom result values.
enum SymptomResult {
  // The symptom result was not specified, or it is unknown.
  UNSPECIFIED_SYMPTOM_RESULT = 0;

  // The symptom result is positive.
  POSITIVE = 1;

  // The symptom result is negative.
  NEGATIVE = 2;
}

// The result of an exam.
enum ExamResult {
  // The exam result is not specified, or it is unknown.
  EXAM_RESULT_UNSPECIFIED = 0;

  // The exam result is abnormal.
  ABNORMAL = 1;

  // The exam result is normal.
  NORMAL = 2;
}

// Source of the transcript.
enum TranscriptSource {
  // Transcript source is unknown.
  TRANSCRIPT_SOURCE_UNSPECIFIED = 0;

  // Transcript was created via Google system.
  MACHINE_INFERRED = 1;

  // Transcript was corrected.
  CORRECTED = 2;
}
